import streamlit as st
import datetime
import pandas as pd
import pyodbc
import json
import numpy as np
import smtplib
import ssl
from email.message import EmailMessage
import base64
from io import BytesIO
from PIL import Image

# --- C·∫§U H√åNH K·∫æT N·ªêI SQL SERVER ---
odbc_driver = "ODBC Driver 17 for SQL Server"
server = "localhost\\SQLEXPRESS"
database = "test6"
encrypt = "yes"
trust_server_certificate = "yes"

conn_str = (
    f"Driver={{{odbc_driver}}};"
    f"Server={server};"
    f"Database={database};"
    "Trusted_Connection=yes;"
    f"Encrypt={encrypt};"
    f"TrustServerCertificate={trust_server_certificate};"
)

# --- D·ªÆ LI·ªÜU C·∫§U H√åNH (BUSINESS LOGIC) ---
config_data = {
    "objectives": [
        {'id': 'revenue', 'icon': 'üí∞', 'title': 'T·ªëi ∆∞u h√≥a Doanh thu', 'description': 'Th√∫c ƒë·∫©y doanh s·ªë t·ª´ t·ªáp KH hi·ªán t·∫°i, ƒë·∫∑c bi·ªát l√† nh√≥m c√≥ gi√° tr·ªã cao.'},
        {'id': 'awareness', 'icon': 'üöÄ', 'title': 'TƒÉng Nh·∫≠n di·ªán & T∆∞∆°ng t√°c', 'description': 'Ti·∫øp c·∫≠n v√† t√°i t∆∞∆°ng t√°c v·ªõi c√°c ph√¢n kh√∫c kh√°ch h√†ng hi·ªán c√≥.'},
        {'id': 'conversion', 'icon': 'üéØ', 'title': 'Gia tƒÉng T·ª∑ l·ªá Chuy·ªÉn ƒë·ªïi', 'description': 'T·ªëi ∆∞u h√≥a h√†nh tr√¨nh kh√°ch h√†ng v√† x·ª≠ l√Ω c√°c "ƒëi·ªÉm ngh·∫Ωn".'},
        {'id': 'launch', 'icon': '‚ú®', 'title': 'Ra m·∫Øt S·∫£n ph·∫©m M·ªõi', 'description': 'Gi·ªõi thi·ªáu SP m·ªõi ƒë·∫øn c√°c PK c√≥ kh·∫£ nƒÉng ti·∫øp nh·∫≠n cao .'}
    ],
    
    "mockDataOwned": {
        "segments": {
            'revenue': ['Kh√°ch h√†ng VIP'],
            'conversion': ['Kh√°ch h√†ng m·ªõi', 'Kh√°ch h√†ng ti·ªÅm nƒÉng'],
            'awareness': ['Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t', 'Kh√°ch h√†ng y·∫øu'],
            'launch': ['Kh√°ch h√†ng VIP', 'Kh√°ch h√†ng trung th√†nh']
        },
        "tactics": {
            'Kh√°ch h√†ng VIP': {
                'owned': [
                    {'id': 'privilege', 'name': 'Ch∆∞∆°ng tr√¨nh ƒê·∫∑c quy·ªÅn (Kh√¥ng gi·∫£m gi√°)', 'desc': 'Early Access, Qu√† t·∫∑ng Sinh nh·∫≠t V·∫≠t l√Ω, Freeship Vƒ©nh vi·ªÖn.'},
                    {'id': 'upsell_email', 'name': 'Chi·∫øn d·ªãch Upsell C√° nh√¢n h√≥a', 'desc': 'G·ª≠i email t·ª± ƒë·ªông gi·ªõi thi·ªáu s·∫£n ph·∫©m cao c·∫•p, phi√™n b·∫£n gi·ªõi h·∫°n.'},
                    {'id': 'referral', 'name': 'Ch∆∞∆°ng tr√¨nh Gi·ªõi thi·ªáu (Referral)', 'desc': 'Bi·∫øn h·ªç th√†nh ƒë·∫°i s·ª©. T·∫∑ng m√£ gi·ªõi thi·ªáu cho b·∫°n b√®.'}
                ], 'marketplace': []
            },
            'Kh√°ch h√†ng m·ªõi': {
                'owned': [
                    {'id': 'onboarding', 'name': 'Chu·ªói Email/Zalo Onboarding (T·ª± ƒë·ªông)', 'desc': 'Ng√†y 1: C·∫£m ∆°n, Ng√†y 3: C·ªông ƒë·ªìng, Ng√†y 7: M√£ gi·∫£m gi√° 15% (h·∫°n 3 ng√†y).'},
                    {'id': 'web_welcome', 'name': 'C√° nh√¢n h√≥a Tr·∫£i nghi·ªám Web', 'desc': 'Hi·ªÉn th·ªã Popup "Ch√†o m·ª´ng tr·ªü l·∫°i! D√πng m√£ [WELCOME15]..."'}
                ], 'marketplace': []
            },
            'Kh√°ch h√†ng ti·ªÅm nƒÉng': {
                 'owned': [
                    {'id': 'onboarding', 'name': 'Chu·ªói Email/Zalo Onboarding (T·ª± ƒë·ªông)', 'desc': 'Ng√†y 1: C·∫£m ∆°n, Ng√†y 3: C·ªông ƒë·ªìng, Ng√†y 7: M√£ gi·∫£m gi√° 15% (h·∫°n 3 ng√†y).'},
                ], 'marketplace': []
            },
            'Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t': {
                'owned': [
                    {'id': 'win_back', 'name': 'Chi·∫øn d·ªãch "Win-back" T·ª± ƒë·ªông', 'desc': 'G·ª≠i Email/SMS "Ch√∫ng t√¥i nh·ªõ b·∫°n!" v·ªõi m√£ gi·∫£m gi√° gi√° tr·ªã cao (25% ho·∫∑c M1T1).'},
                    {'id': 'remarketing_multi', 'name': 'Remarketing ƒêa n·ªÅn t·∫£ng', 'desc': 'ƒê·∫©y t·ªáp email/SƒêT sang Facebook/Google Ads v·ªõi th√¥ng ƒëi·ªáp BST M·ªõi.'},
                    {'id': 'survey', 'name': 'Kh·∫£o s√°t Kh√°ch h√†ng', 'desc': 'G·ª≠i email kh·∫£o s√°t "T·∫°i sao b·∫°n ch∆∞a quay l·∫°i?" v√† t·∫∑ng voucher 50k.'}
                ], 'marketplace': []
            },
            'Kh√°ch h√†ng y·∫øu': {
                 'owned': [
                    {'id': 'win_back', 'name': 'Chi·∫øn d·ªãch "Win-back" T·ª± ƒë·ªông', 'desc': 'G·ª≠i Email/SMS "Ch√∫ng t√¥i nh·ªõ b·∫°n!" v·ªõi m√£ gi·∫£m gi√° gi√° tr·ªã cao (25% ho·∫∑c M1T1).'},
                ], 'marketplace': []
            },
            'Kh√°ch h√†ng trung th√†nh': {
                'owned': [
                    {'id': 'early_access', 'name': 'M·ªü b√°n S·ªõm (Exclusive Early Access)', 'desc': 'G·ª≠i email/Zalo cho c·ª•m n√†y mua tr∆∞·ªõc c√¥ng ch√∫ng 1-2 ng√†y.'},
                    {'id': 'cross_sell', 'name': 'T·∫°o Combo B√°n ch√©o (Cross-sell)', 'desc': 'T·∫°o combo "S·∫£n ph·∫©m m·ªõi + S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t (m√† h·ªç hay mua)".'},
                ], 'marketplace': []
            }
        },
        "tacticRecommendations": {
            'Kh√°ch h√†ng VIP': ['privilege', 'upsell_email', 'referral'],
            'Kh√°ch h√†ng m·ªõi': ['onboarding', 'web_welcome'],
            'Kh√°ch h√†ng ti·ªÅm nƒÉng': ['onboarding'],
            'Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t': ['win_back', 'remarketing_multi', 'survey'],
            'Kh√°ch h√†ng y·∫øu': ['win_back'],
            'Kh√°ch h√†ng trung th√†nh': ['early_access', 'cross_sell']
        }
    },
    
    "mockDataMarketplace": {
        "tactics": {
            'owned': [],
            'marketplace': [
                {'id': 'mp_ads', 'name': 'Qu·∫£ng c√°o tr·∫£ ph√≠ (Ads)', 'desc': 'Ti·∫øp th·ªã l·∫°i (C·ª•m M·ªõi) ho·∫∑c T√¨m ki·∫øm (t·ªáp m·ªõi).'},
                {'id': 'mp_flash_sale', 'name': 'Flash Sale', 'desc': 'K√≠ch ho·∫°t C·ª•m Nguy c∆° v√† C·ª•m ƒê√£ m·∫•t.'},
                {'id': 'mp_voucher', 'name': 'Voucher / Coupon', 'desc': 'C√¥ng c·ª• linh ho·∫°t: G·ª≠i chat (VIP) ho·∫∑c Follower (M·ªõi).'},
                {'id': 'mp_livestream', 'name': 'Livestream', 'desc': 'T∆∞∆°ng t√°c & ch·ªët ƒë∆°n t·ªáp Trung th√†nh, Nguy c∆°, M·ªõi.'},
                {'id': 'mp_combo', 'name': 'Combo mua k√®m (Bundle Deals)', 'desc': 'TƒÉng AOV cho t·∫•t c·∫£ c√°c c·ª•m, ƒë·∫∑c bi·ªát l√† VIP, Trung th√†nh.'}
            ]
        }
    }
}

# --- H√ÄM X·ª¨ L√ù H√åNH ·∫¢NH ---
def image_to_base64(image_file):
    """Chuy·ªÉn ƒë·ªïi file ·∫£nh upload th√†nh base64 string ƒë·ªÉ l∆∞u v√†o CSDL"""
    if image_file is None:
        return None
    try:
        img = Image.open(image_file)
        buffered = BytesIO()
        img.save(buffered, format=img.format if img.format else "PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        return f"data:image/{img.format.lower() if img.format else 'png'};base64,{img_str}"
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
        return None

# --- C√ÅC H√ÄM T∆Ø∆†NG T√ÅC V·ªöI DATABASE ---
def get_db_connection():
    """T·∫°o k·∫øt n·ªëi m·ªõi ƒë·∫øn SQL Server."""
    try:
        return pyodbc.connect(conn_str)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi CSDL: {e}")
        return None

def init_campaign_db():
    """Kh·ªüi t·∫°o b·∫£ng Campaign_Manager n·∫øu ch∆∞a t·ªìn t·∫°i."""
    conn = get_db_connection()
    if not conn:
        return
    
    try:
        with conn.cursor() as cur:
            cur.execute("""
            IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Campaign_Manager_UX' and xtype='U')
            CREATE TABLE Campaign_Manager_UX (
                CampaignID INT IDENTITY(1,1) PRIMARY KEY,
                Name NVARCHAR(255) NOT NULL,
                Platform NVARCHAR(100),
                Objective NVARCHAR(255),
                Segment NVARCHAR(255),
                Tactic NVARCHAR(255),
                Status NVARCHAR(50) DEFAULT 'ƒê√£ l∆∞u',
                Budget REAL DEFAULT 0,
                ActualRevenue REAL DEFAULT 0,
                KPI NVARCHAR(MAX),
                StartDate DATE,
                EndDate DATE,
                Notes NVARCHAR(MAX),
                DynamicData NVARCHAR(MAX)
            )
            """)
        conn.commit()
    except Exception as e:
        st.warning(f"L·ªói khi kh·ªüi t·∫°o b·∫£ng Campaign_Manager_UX: {e}")
    finally:
        conn.close()

@st.cache_data(ttl=600)
def load_campaigns_from_db():
    """T·∫£i t·∫•t c·∫£ chi·∫øn d·ªãch ƒë√£ l∆∞u t·ª´ CSDL."""
    conn = get_db_connection()
    if not conn:
        return []
        
    campaigns = []
    try:
        df = pd.read_sql("SELECT * FROM Campaign_Manager_UX ORDER BY CampaignID DESC", conn)
        
        for _, row in df.iterrows():
            campaign = row.to_dict()
            campaign['id'] = campaign.pop('CampaignID')
            campaign['name'] = campaign.pop('Name')
            campaign['platform'] = campaign.pop('Platform')
            campaign['objective'] = campaign.pop('Objective')
            campaign['segment'] = campaign.pop('Segment')
            campaign['tactic'] = campaign.pop('Tactic')
            campaign['status'] = campaign.pop('Status')
            campaign['budget'] = campaign.pop('Budget')
            campaign['revenue'] = campaign.pop('ActualRevenue')
            campaign['kpi'] = campaign.pop('KPI')
            campaign['startDate'] = str(campaign.pop('StartDate'))
            campaign['endDate'] = str(campaign.pop('EndDate'))
            campaign['notes'] = campaign.pop('Notes')
            campaign['dynamicData'] = json.loads(campaign.pop('DynamicData')) if campaign.get('DynamicData') else {}
            campaigns.append(campaign)
            
        return campaigns
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i chi·∫øn d·ªãch t·ª´ CSDL: {e}")
        return []
    finally:
        conn.close()

@st.cache_data(ttl=600)
def load_real_segment_data():
    """T·∫£i d·ªØ li·ªáu ph√¢n kh√∫c TH·∫¨T t·ª´ CSDL."""
    conn = get_db_connection()
    if not conn:
        return pd.DataFrame()
    
    try:
        query = """
        SELECT 
            PhanKhuc,
            COUNT(KhachHangID) AS SoLuong,
            AVG(Recency) AS R_TB,
            AVG(Frequency) AS F_TB,
            AVG(Monetary) AS M_TB,
            SUM(Monetary) AS TongDoanhThu
        FROM Customer_Segmentation
        WHERE PhanKhuc IS NOT NULL
        GROUP BY PhanKhuc
        """
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu ph√¢n kh√∫c: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

def save_campaign_to_db(form_data, session_data):
    """L∆∞u chi·∫øn d·ªãch m·ªõi v√†o CSDL."""
    conn = get_db_connection()
    if not conn: return False
    
    dynamic_data_json = json.dumps(form_data.get('dynamicData', {}))
    
    try:
        with conn.cursor() as cur:
            cur.execute("""
            INSERT INTO Campaign_Manager_UX
                (Name, Platform, Objective, Segment, Tactic, Status, Budget, 
                 KPI, StartDate, EndDate, Notes, DynamicData)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            form_data['campaign-name'],
            session_data['platform'],
            session_data['objective']['title'],
            session_data['segment']['name'],
            session_data['tactic']['name'],
            'üìù ƒê√£ l∆∞u',
            float(form_data['campaign-budget']) if form_data['campaign-budget'] else 0,
            form_data['campaign-kpi'],
            str(form_data['campaign-start-date']),
            str(form_data['campaign-end-date']),
            form_data['campaign-notes'],
            dynamic_data_json
            )
        conn.commit()
        return True
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u chi·∫øn d·ªãch v√†o CSDL: {e}")
        return False
    finally:
        conn.close()

def update_campaign_status_in_db(campaign_id, new_status, new_revenue=None):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫∑c doanh thu."""
    conn = get_db_connection()
    if not conn: return
        
    try:
        with conn.cursor() as cur:
            if new_revenue is not None:
                cur.execute("UPDATE Campaign_Manager_UX SET Status = ?, ActualRevenue = ? WHERE CampaignID = ?",
                            (new_status, new_revenue, campaign_id))
            else:
                 cur.execute("UPDATE Campaign_Manager_UX SET Status = ? WHERE CampaignID = ?",
                            (new_status, campaign_id))
        conn.commit()
        st.cache_data.clear()
    except Exception as e:
        st.error(f"L·ªói khi c·∫≠p nh·∫≠t chi·∫øn d·ªãch: {e}")
    finally:
        conn.close()

@st.cache_data(ttl=600)
def get_emails_for_segment(segment_name):
    """L·∫•y danh s√°ch email cho m·ªôt ph√¢n kh√∫c."""
    conn = get_db_connection()
    if not conn: return []
    try:
        query = """
        SELECT KH.Email
        FROM DimKhachHang KH
        JOIN Customer_Segmentation CS ON KH.KhachHangID = CS.KhachHangID
        WHERE CS.PhanKhuc = ? AND KH.Email IS NOT NULL AND KH.Email LIKE '%@%'
        """
        df = pd.read_sql(query, conn, params=(segment_name,))
        return df['Email'].tolist()
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y email ph√¢n kh√∫c: {e}")
        return []
    finally:
        conn.close()

# --- KH·ªûI T·∫†O TR·∫†NG TH√ÅI ---
def init_state():
    defaults = {
        'current_step': 1,
        'selected_platform': None,
        'selected_objective': None,
        'selected_segment': None,
        'selected_tactic': None,
        'view': 'wizard',
        'show_demo_modal': False,
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

    if 'campaigns' not in st.session_state:
        st.session_state.campaigns = load_campaigns_from_db() 
        
    if 'stepper_names' not in st.session_state:
        st.session_state.stepper_names = {
            1: "Ch·ªçn N·ªÅn T·∫£ng", 2: "Ch·ªçn M·ª•c Ti√™u", 3: "Ch·ªçn Ph√¢n Kh√∫c",
            4: "Ch·ªçn Chi·∫øn Thu·∫≠t", 5: "Thi·∫øt K·∫ø", 6: "Ho√†n T·∫•t"
        }
    
    if 'real_segment_data' not in st.session_state:
        st.session_state.real_segment_data = load_real_segment_data()

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
def format_currency(value):
    try:
        val = float(value)
        return f"{val:,.0f} ‚Ç´".replace(",", ".")
    except (ValueError, TypeError, AttributeError):
        return "0 ‚Ç´"

def go_to_step(step):
    st.session_state.current_step = step

def go_to_view(view_name):
    st.session_state.view = view_name
    if view_name == 'wizard':
        st.session_state.current_step = 1
        reset_wizard()
    st.rerun()

def reset_wizard():
    st.session_state.current_step = 1
    st.session_state.selected_platform = None
    st.session_state.selected_objective = None
    st.session_state.selected_segment = None
    st.session_state.selected_tactic = None
    update_stepper_names('owned')

def update_stepper_names(platform):
    if platform == 'owned':
        st.session_state.stepper_names = {
            1: "Ch·ªçn N·ªÅn T·∫£ng", 2: "Ch·ªçn M·ª•c Ti√™u", 3: "Ch·ªçn Ph√¢n Kh√∫c",
            4: "Ch·ªçn Chi·∫øn Thu·∫≠t", 5: "Thi·∫øt K·∫ø", 6: "Ho√†n T·∫•t"
        }
    elif platform == 'marketplace':
        st.session_state.stepper_names = {
            1: "Ch·ªçn N·ªÅn T·∫£ng", 2: "Dashboard & M·ª•c Ti√™u", 3: "(B·ªè qua)",
            4: "Ch·ªçn Chi·∫øn D·ªãch", 5: "Thi·∫øt K·∫ø", 6: "Ho√†n T·∫•t"
        }

# --- C√ÅC H√ÄM X·ª¨ L√ù LOGIC ---
def select_platform(platform):
    st.session_state.selected_platform = platform
    update_stepper_names(platform)
    go_to_step(2)

def select_objective(goal_id, goal_title):
    st.session_state.selected_objective = {'id': goal_id, 'title': goal_title}
    df_real_segments = st.session_state.real_segment_data
    
    if st.session_state.selected_platform == 'owned':
        go_to_step(3)
    elif st.session_state.selected_platform == 'marketplace':
        if df_real_segments.empty:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√¢n kh√∫c th·∫≠t. D√πng d·ªØ li·ªáu d·ª± ph√≤ng.")
            logic_name = 'ƒê·ªÅ xu·∫•t chung'
        else:
            total_customers = df_real_segments['SoLuong'].sum()
            
            map_rich = ['Kh√°ch h√†ng VIP', 'Kh√°ch h√†ng trung th√†nh']
            map_at_risk = ['Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t', 'Kh√°ch h√†ng y·∫øu']
            map_new = ['Kh√°ch h√†ng m·ªõi', 'Kh√°ch h√†ng ti·ªÅm nƒÉng']

            rich_percentage = df_real_segments[df_real_segments['PhanKhuc'].isin(map_rich)]['SoLuong'].sum() / total_customers * 100
            at_risk_percentage = df_real_segments[df_real_segments['PhanKhuc'].isin(map_at_risk)]['SoLuong'].sum() / total_customers * 100
            new_percentage = df_real_segments[df_real_segments['PhanKhuc'].isin(map_new)]['SoLuong'].sum() / total_customers * 100
            only_new_percentage = df_real_segments[df_real_segments['PhanKhuc'] == 'Kh√°ch h√†ng m·ªõi']['SoLuong'].sum() / total_customers * 100

            logic_name = 'ƒê·ªÅ xu·∫•t chung'
            if goal_id == 'revenue' and rich_percentage > 30:
                logic_name = f"T·ªáp VIP/Trung th√†nh ({rich_percentage:.0f}%)"
            elif goal_id == 'awareness' and at_risk_percentage > 30:
                logic_name = f"T·ªáp Nguy c∆° ({at_risk_percentage:.0f}%)"
            elif goal_id == 'conversion' and (new_percentage > 40 or only_new_percentage > 20):
                logic_name = f"T·ªáp M·ªõi/V√£ng lai ({only_new_percentage:.0f}%)"
            elif goal_id == 'launch':
                logic_name = 'Ra m·∫Øt S·∫£n ph·∫©m M·ªõi'
            else:
                logic_name = 'ƒê·ªÅ xu·∫•t chung theo M·ª•c ti√™u'

        st.session_state.selected_segment = {'id': 'marketplace_logic', 'name': f"Logic: {logic_name}"}
        go_to_step(4)

def select_segment(segment_id, segment_name):
    st.session_state.selected_segment = {'id': segment_id, 'name': segment_name}
    go_to_step(4)

def select_tactic(tactic_id, tactic_name, tactic_type):
    st.session_state.selected_tactic = {'id': tactic_id, 'name': tactic_name, 'type': tactic_type}
    go_to_step(5)

def handle_save_campaign(form_data):
    session_data = {
        'platform': st.session_state.selected_platform,
        'objective': st.session_state.selected_objective,
        'segment': st.session_state.selected_segment,
        'tactic': st.session_state.selected_tactic,
    }
    
    # Thu th·∫≠p dynamic data v√† x·ª≠ l√Ω UploadedFile
    dynamic_data = {}
    for k, v in st.session_state.items():
        if k.startswith('tactic-'):
            # B·ªè qua UploadedFile object (key c√≥ '-uploader')
            if k.endswith('-uploader'):
                continue
            # C√°c gi√° tr·ªã kh√°c gi·ªØ nguy√™n (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong render_dynamic_form)
            dynamic_data[k] = v
    
    form_data['dynamicData'] = dynamic_data

    success = save_campaign_to_db(form_data, session_data)
    
    if success:
        st.toast(f"ƒê√£ l∆∞u chi·∫øn d·ªãch: {form_data['campaign-name']}", icon="‚úÖ")
        st.cache_data.clear()
        st.session_state.campaigns = load_campaigns_from_db()
        go_to_view('dashboard')
        st.session_state.current_step = 6
    else:
        st.error("L∆∞u chi·∫øn d·ªãch th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.")

def build_html_email(data):
    """X√¢y d·ª±ng n·ªôi dung email HTML t·ª´ dynamicData."""
    subject = data.get('tactic-email-subject', "M·ªôt th√¥ng b√°o m·ªõi t·ª´ ch√∫ng t√¥i")
    image_data = data.get('tactic-email-image', '')
    body = data.get('tactic-email-body', 'ƒê√¢y l√† n·ªôi dung email c·ªßa b·∫°n.')
    button_text = data.get('tactic-email-button-text', 'Xem ngay')
    button_url = data.get('tactic-email-button-url', '#')
    
    body_text = body.replace('\n', '<br>')
    
    html_content = f"""
    <html>
    <head>
        <style>
            .container {{ font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }}
            .banner {{ max-width: 100%; height: auto; border-radius: 8px; }}
            .content {{ padding: 20px 0; }}
            .button {{
                display: inline-block;
                padding: 12px 24px;
                font-size: 16px;
                font-weight: bold;
                color: #ffffff;
                background-color: #007bff;
                text-decoration: none;
                border-radius: 5px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <p><strong>Ti√™u ƒë·ªÅ: {subject}</strong></p>
            {"<img src='" + image_data + "' alt='Banner' class='banner'>" if image_data else ""}
            <div class="content">
                <p>Xin ch√†o,</p>
                <p>{body_text}</p>
            </div>
            <a href="{button_url}" class="button">{button_text}</a>
            <p style="font-size: 12px; color: #888; margin-top: 20px;">Tr√¢n tr·ªçng,<br>(T√™n c√¥ng ty c·ªßa b·∫°n)</p>
        </div>
    </body>
    </html>
    """
    
    plain_text_content = f"""
    Ti√™u ƒë·ªÅ: {subject}
    Xin ch√†o,
    {body}
    
    {button_text}: {button_url}
    
    Tr√¢n tr·ªçng,
    (T√™n c√¥ng ty c·ªßa b·∫°n)
    """
    
    return subject, plain_text_content, html_content

def send_email_campaign(campaign, email_list):
    """So·∫°n v√† g·ª≠i email HTML."""
    try:
        config = st.secrets.email
        sender_email = config.sender_email
        sender_password = config.sender_password
        smtp_server = config.smtp_server
        smtp_port = int(config.smtp_port)
    except Exception:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh email trong file .streamlit/secrets.toml.")
        return False

    dynamic_data = campaign.get('dynamicData', {})
    subject, plain_text_body, html_body = build_html_email(dynamic_data)
    
    context = ssl.create_default_context()
    try:
        emails_to_send = email_list[:5] 
        st.warning(f"ƒêang g·ª≠i {len(emails_to_send)} email (Gi·ªõi h·∫°n 5 email cho demo). T·ªïng t·ªáp: {len(email_list)} KH.")
        
        with smtplib.SMTP_SSL(smtp_server, smtp_port, context=context) as server:
            server.login(sender_email, sender_password)
            
            for receiver_email in emails_to_send:
                msg = EmailMessage()
                msg['Subject'] = subject
                msg['From'] = sender_email
                msg['To'] = receiver_email
                msg.set_content(plain_text_body)
                msg.add_alternative(html_body, subtype='html')
                server.send_message(msg)
            
            if len(email_list) > 5:
                st.info(f"ƒê√£ g·ª≠i 5 email demo. (B·ªè qua {len(email_list) - 5} email c√≤n l·∫°i).")

        return True
    except smtplib.SMTPException as e:
        st.error(f"L·ªói SMTP: {e}")
        return False
    except Exception as e:
        st.error(f"L·ªói khi g·ª≠i email: {e}")
        return False

def activate_campaign(campaign_id):
    """K√≠ch ho·∫°t v√† G·ª≠i Email."""
    campaign = next((c for c in st.session_state.campaigns if c['id'] == campaign_id), None)
    if not campaign:
        st.error("Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch!")
        return

    segment_name = campaign.get('segment')
    if not segment_name or st.session_state.selected_platform != 'owned' or not campaign.get('dynamicData'):
        st.info("Chi·∫øn d·ªãch n√†y kh√¥ng ph·∫£i 'K√™nh S·ªü H·ªØu' ho·∫∑c ch∆∞a thi·∫øt k·∫ø n·ªôi dung email. Ch·ªâ k√≠ch ho·∫°t tr·∫°ng th√°i.")
    else:
        with st.spinner(f"ƒêang l·∫•y danh s√°ch email cho ph√¢n kh√∫c: {segment_name}..."):
            email_list = get_emails_for_segment(segment_name)
        
        if not email_list:
            st.error(f"Kh√¥ng t√¨m th·∫•y email n√†o cho ph√¢n kh√∫c '{segment_name}'. Chi·∫øn d·ªãch v·∫´n s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t.")
        else:
            with st.spinner(f"ƒêang g·ª≠i email ƒë·∫øn {len(email_list)} kh√°ch h√†ng..."):
                success = send_email_campaign(campaign, email_list)
                if not success:
                    st.warning("G·ª≠i email th·∫•t b·∫°i, nh∆∞ng chi·∫øn d·ªãch V·∫™N ƒê∆Ø·ª¢C K√çCH HO·∫†T.")
                else:
                    st.success(f"ƒê√£ g·ª≠i {min(len(email_list), 5)} email demo th√†nh c√¥ng.")

    update_campaign_status_in_db(campaign_id, 'üü¢ ƒêang ch·∫°y')
    st.session_state.campaigns = load_campaigns_from_db()
    st.toast(f"ƒê√£ k√≠ch ho·∫°t chi·∫øn d·ªãch", icon="üöÄ")
    st.rerun()

def show_result_modal(campaign_id):
    st.session_state.editing_campaign_id = campaign_id

def save_campaign_result(campaign_id, revenue):
    update_campaign_status_in_db(campaign_id, 'üü° ƒê√£ k·∫øt th√∫c', new_revenue=revenue)
    st.session_state.campaigns = load_campaigns_from_db()
    st.toast(f"ƒê√£ c·∫≠p nh·∫≠t doanh thu", icon="üí∞")
    
    if 'editing_campaign_id' in st.session_state:
        del st.session_state.editing_campaign_id
    st.rerun()

# --- C√ÅC H√ÄM RENDER UI ---
def render_header_and_nav():
    cols = st.columns([3, 1])
    with cols[0]:
        st.title("Module ƒê·ªÅ Xu·∫•t Chi·∫øn L∆∞·ª£c")
        st.caption("V·∫≠n h√†nh chi·∫øn l∆∞·ª£c marketing c√° nh√¢n h√≥a ƒëa k√™nh (Phi√™n b·∫£n d·ªØ li·ªáu th·∫≠t)")
    
    with cols[1]:
        nav_cols = st.columns(2)
        with nav_cols[0]:
            st.button(
                "T·∫°o Chi·∫øn D·ªãch M·ªõi", 
                on_click=go_to_view, 
                args=('wizard',), 
                use_container_width=True,
                type="primary" if st.session_state.view == 'wizard' else "secondary"
            )
        with nav_cols[1]:
            st.button(
                f"Xem Dashboard ({len(st.session_state.campaigns)})", 
                on_click=go_to_view, 
                args=('dashboard',), 
                use_container_width=True,
                type="primary" if st.session_state.view == 'dashboard' else "secondary"
            )
    st.divider()

def render_stepper():
    current_step = st.session_state.current_step
    platform = st.session_state.selected_platform
    names = st.session_state.stepper_names
    
    valid_steps = [1, 2, 4, 5, 6] if platform == 'marketplace' else [1, 2, 3, 4, 5, 6]
    cols = st.columns(len(valid_steps))
    
    col_idx = 0
    for step_num in sorted(names.keys()):
        if step_num not in valid_steps:
            continue
            
        step_name = names[step_num]
        col = cols[col_idx]
        col_idx += 1
        
        with col:
            if step_num < current_step:
                st.markdown(f"**‚úÖ {step_num}. {step_name}**")
            elif step_num == current_step:
                st.markdown(f"üîµ **{step_num}. {step_name}**")
            else:
                st.markdown(f"<span style='color:grey;'>{step_num}. {step_name}</span>", unsafe_allow_html=True)

def render_step_1():
    st.header("B∆∞·ªõc 1: Ch·ªçn N·ªÅn T·∫£ng Kinh Doanh Ch√≠nh", divider="blue")
    st.write("Kh√°ch h√†ng c·ªßa b·∫°n ch·ªß y·∫øu ƒëang ·ªü ƒë√¢u? ƒêi·ªÅu n√†y s·∫Ω gi√∫p h·ªá th·ªëng ƒë·ªÅ xu·∫•t k·ªãch b·∫£n ph√π h·ª£p.")
    
    cols = st.columns(2)
    with cols[0]:
        with st.container(border=True):
            st.markdown("### üåê K√™nh S·ªü H·ªØu (Owned)")
            st.write("Doanh nghi·ªáp c·ªßa t√¥i c√≥ Website, App, CRM ri√™ng v√† mu·ªën c√° nh√¢n h√≥a tr·∫£i nghi·ªám tr√™n c√°c k√™nh n√†y (Email, Zalo, Web Popup...).")
            st.button("Ch·ªçn K√™nh S·ªü H·ªØu", on_click=select_platform, args=('owned',), use_container_width=True, type="primary")

    with cols[1]:
        with st.container(border=True):
            st.markdown("### üõçÔ∏è K√™nh S√†n TMƒêT (Marketplace)")
            st.write("Doanh nghi·ªáp c·ªßa t√¥i kinh doanh ch·ªß y·∫øu tr√™n c√°c s√†n nh∆∞ Shopee, Lazada, Tiki... v√† mu·ªën t·∫≠n d·ª•ng c√°c c√¥ng c·ª• c·ªßa s√†n (Ads, Voucher, Livestream).")
            st.button("Ch·ªçn S√†n TMƒêT", on_click=select_platform, args=('marketplace',), use_container_width=True, type="primary")

def render_step_2():
    st.button("‚¨ÖÔ∏è Quay l·∫°i ch·ªçn N·ªÅn T·∫£ng", on_click=go_to_step, args=(1,))
    
    if st.session_state.selected_platform == 'owned':
        st.header("B∆∞·ªõc 2: X√°c ƒë·ªãnh M·ª•c ti√™u Chi·∫øn l∆∞·ª£c (The 'Why')", divider="blue")
        st.write("Ch·ªçn m·ª•c ti√™u kinh doanh c·ªët l√µi ƒë·ªÉ h·ªá th·ªëng ƒë·ªÅ xu·∫•t ph√¢n kh√∫c kh√°ch h√†ng ph√π h·ª£p.")
    else:
        st.header("B∆∞·ªõc 2: Hi·ªán tr·∫°ng Dashboard & Ch·ªçn M·ª•c ti√™u", divider="blue")
        st.write("H·ªá th·ªëng ƒë√£ ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng t·ª´ CSDL. H√£y xem hi·ªán tr·∫°ng v√† ch·ªçn m·ª•c ti√™u b·∫°n mu·ªën ∆∞u ti√™n.")
        
        with st.container(border=True):
            st.subheader("Hi·ªán tr·∫°ng Ph√¢n kh√∫c Kh√°ch h√†ng (T·ª´ CSDL)")
            
            df_real = st.session_state.real_segment_data
            if df_real.empty:
                st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu ph√¢n kh√∫c th·∫≠t.")
            else:
                color_map = {
                    'Kh√°ch h√†ng VIP': '#FACC15',
                    'Kh√°ch h√†ng trung th√†nh': '#3B82F6',
                    'Kh√°ch h√†ng ·ªïn ƒë·ªãnh': '#10B981',
                    'Kh√°ch h√†ng ti·ªÅm nƒÉng': '#8B5CF6',
                    'Kh√°ch h√†ng m·ªõi': '#4ADE80',
                    'Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t': '#EF4444',
                    'Kh√°ch h√†ng y·∫øu': '#F97316'
                }
                
                df_real['percentage'] = (df_real['SoLuong'] / df_real['SoLuong'].sum()) * 100
                df_real['color'] = df_real['PhanKhuc'].map(color_map).fillna('#9CA3AF')
                
                distribution = df_real.to_dict('records')
                percentages = [d['percentage'] for d in distribution]
                colors = [d['color'] for d in distribution]
                
                sorted_data = sorted(zip(percentages, colors, distribution), key=lambda x: x[0], reverse=True)
                
                bar_cols = st.columns([p for p, c, d in sorted_data])
                for i, (p, c, d) in enumerate(sorted_data):
                    with bar_cols[i]:
                        st.markdown(f"<div style='background-color:{c}; height: 20px; border-radius: 2px;' title='{d['PhanKhuc']}: {d['percentage']:.1f}%'></div>", unsafe_allow_html=True)
                
                legend_cols = st.columns(len(distribution))
                for i, (p, c, d) in enumerate(sorted_data):
                    with legend_cols[i]:
                        st.markdown(f"<span style='color:{c};'>‚óè</span> **{d['PhanKhuc']}**: {d['percentage']:.1f}% ({d['SoLuong']} KH)", unsafe_allow_html=True)

        st.divider()
        st.subheader("D·ª±a tr√™n d·ªØ li·ªáu tr√™n, h√£y ch·ªçn m·ªôt m·ª•c ti√™u:")

    objectives = config_data["objectives"]
    cols = st.columns(len(objectives))
    for i, goal in enumerate(objectives):
        with cols[i % len(objectives)]:
            with st.container(border=True):
                st.markdown(f"### {goal['icon']} {goal['title']}")
                st.write(goal['description'])
                st.button(f"Ch·ªçn m·ª•c ti√™u: {goal['title']}", on_click=select_objective, args=(goal['id'], goal['title']), use_container_width=True, key=f"goal_{goal['id']}")

def render_step_3():
    st.button("‚¨ÖÔ∏è Quay l·∫°i ch·ªçn M·ª•c ti√™u", on_click=go_to_step, args=(2,))
    st.header("B∆∞·ªõc 3: ƒê·ªÅ xu·∫•t Ph√¢n kh√∫c ƒê·ªëi t∆∞·ª£ng (The 'Who')", divider="blue")
    st.write(f"D·ª±a tr√™n m·ª•c ti√™u **{st.session_state.selected_objective['title']}**, h·ªá th·ªëng ƒë·ªÅ xu·∫•t c√°c ph√¢n kh√∫c sau (t·ª´ CSDL):")
    
    goal_id = st.session_state.selected_objective['id']
    segment_names = config_data["mockDataOwned"]["segments"].get(goal_id, [])
    
    df_real = st.session_state.real_segment_data
    if df_real.empty:
        st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu ph√¢n kh√∫c th·∫≠t.")
        return
        
    segments_to_show = df_real[df_real['PhanKhuc'].isin(segment_names)]
    
    if segments_to_show.empty:
        st.warning("Kh√¥ng t√¨m th·∫•y ph√¢n kh√∫c ƒë·ªÅ xu·∫•t trong CSDL cho m·ª•c ti√™u n√†y.")
        return

    icon_map = {
        'Kh√°ch h√†ng VIP': 'üëë',
        'Kh√°ch h√†ng trung th√†nh': 'üíé',
        'Kh√°ch h√†ng ·ªïn ƒë·ªãnh': 'üëç',
        'Kh√°ch h√†ng ti·ªÅm nƒÉng': 'üå±',
        'Kh√°ch h√†ng m·ªõi': '‚ú®',
        'Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t': 'üòü',
        'Kh√°ch h√†ng y·∫øu': 'üíî'
    }

    for _, segment in segments_to_show.iterrows():
        seg_name = segment['PhanKhuc']
        seg_icon = icon_map.get(seg_name, 'üë•')
        
        with st.container(border=True):
            cols = st.columns([3, 1])
            with cols[0]:
                st.markdown(f"### {seg_icon} {seg_name}")
                st.caption(f"ƒê·ªãnh nghƒ©a (Trung b√¨nh): R={segment['R_TB']:.0f} ng√†y | F={segment['F_TB']:.1f} l·∫ßn | M={format_currency(segment['M_TB'])}")
            with cols[1]:
                st.button(f"Ch·ªçn t·ªáp {seg_name}", on_click=select_segment, args=(seg_name, seg_name), use_container_width=True, type="primary", key=f"seg_{seg_name}")
            
            st.markdown(f"**Th√¥ng tin chi ti·∫øt (t·ª´ CSDL):**")
            detail_cols = st.columns(3)
            detail_cols[0].metric("S·ªë l∆∞·ª£ng Kh√°ch h√†ng", f"{segment['SoLuong']} KH")
            detail_cols[1].metric("T·ªïng Doanh thu", format_currency(segment['TongDoanhThu']))
            detail_cols[2].metric("Doanh thu / KH", format_currency(segment['M_TB']))

def render_step_4():
    back_step = 2 if st.session_state.selected_platform == 'marketplace' else 3
    back_text = "‚¨ÖÔ∏è Quay l·∫°i Dashboard & M·ª•c ti√™u" if back_step == 2 else "‚¨ÖÔ∏è Quay l·∫°i ch·ªçn Ph√¢n kh√∫c"
    st.button(back_text, on_click=go_to_step, args=(back_step,))

    st.header("B∆∞·ªõc 4: ƒê·ªÅ xu·∫•t K·ªãch b·∫£n & Chi·∫øn thu·∫≠t (The 'How')", divider="blue")
    st.write(f"Ch·ªçn m·ªôt k·ªãch b·∫£n/chi·∫øn thu·∫≠t cho **{st.session_state.selected_segment['name']}**.")

    if st.session_state.selected_platform == 'owned':
        render_step_4_owned()
    else:
        render_step_4_marketplace()

def render_step_4_owned():
    segment_id = st.session_state.selected_segment['id']
    tactics_data = config_data["mockDataOwned"]["tactics"].get(segment_id, {})
    owned_tactics = tactics_data.get('owned', [])
    recommendations = config_data["mockDataOwned"]["tacticRecommendations"].get(segment_id, [])

    st.subheader("A. K√™nh s·ªü h·ªØu (Owned Channels)")
    st.write("T·∫≠p trung v√†o c√° nh√¢n h√≥a s√¢u v√† t·ª± ƒë·ªông h√≥a tr√™n website, app, CRM.")
    
    if not owned_tactics:
        st.info("Kh√¥ng c√≥ chi·∫øn thu·∫≠t n√†o ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a cho ph√¢n kh√∫c n√†y.")
        return

    for tactic in owned_tactics:
        is_recommended = tactic['id'] in recommendations
        
        with st.container(border=is_recommended):
            if is_recommended:
                st.markdown("**‚≠ê ƒê·ªÄ XU·∫§T**")
            st.markdown(f"**{tactic['name']}**")
            st.write(tactic['desc'])
            st.button(
                "Thi·∫øt K·∫ø Chi·∫øn D·ªãch", 
                on_click=select_tactic, 
                args=(tactic['id'], tactic['name'], 'owned'), 
                use_container_width=True,
                key=f"tactic_{tactic['id']}",
                type="primary" if is_recommended else "secondary"
            )

def render_step_4_marketplace():
    all_tactics = config_data["mockDataMarketplace"]["tactics"]["marketplace"]
    goal_id = st.session_state.selected_objective['id']
    df_real = st.session_state.real_segment_data
    
    recommendations = []
    
    if not df_real.empty:
        total_customers = df_real['SoLuong'].sum()
        map_rich = ['Kh√°ch h√†ng VIP', 'Kh√°ch h√†ng trung th√†nh']
        map_at_risk = ['Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t', 'Kh√°ch h√†ng y·∫øu']
        map_new = ['Kh√°ch h√†ng m·ªõi', 'Kh√°ch h√†ng ti·ªÅm nƒÉng']

        rich_percentage = df_real[df_real['PhanKhuc'].isin(map_rich)]['SoLuong'].sum() / total_customers * 100
        at_risk_percentage = df_real[df_real['PhanKhuc'].isin(map_at_risk)]['SoLuong'].sum() / total_customers * 100
        new_percentage = df_real[df_real['PhanKhuc'].isin(map_new)]['SoLuong'].sum() / total_customers * 100
        only_new_percentage = df_real[df_real['PhanKhuc'] == 'Kh√°ch h√†ng m·ªõi']['SoLuong'].sum() / total_customers * 100

        if goal_id == 'revenue' and rich_percentage > 30:
            recommendations = ['mp_voucher', 'mp_combo', 'mp_livestream']
        elif goal_id == 'awareness' and at_risk_percentage > 30:
            recommendations = ['mp_flash_sale', 'mp_livestream', 'mp_voucher']
        elif goal_id == 'conversion' and (new_percentage > 40 or only_new_percentage > 20):
            recommendations = ['mp_ads', 'mp_voucher', 'mp_combo']
        elif goal_id == 'launch':
            recommendations = ['mp_livestream', 'mp_ads', 'mp_voucher']
        else:
            if goal_id == 'revenue': recommendations = ['mp_combo', 'mp_voucher']
            elif goal_id == 'conversion': recommendations = ['mp_ads', 'mp_voucher']
            elif goal_id == 'awareness': recommendations = ['mp_flash_sale', 'mp_livestream']
            elif goal_id == 'launch': recommendations = ['mp_livestream', 'mp_ads', 'mp_voucher']
            
    st.subheader("B. K√™nh S√†n TMƒêT (Marketplace)")
    st.write("T·∫≠n d·ª•ng c√°c c√¥ng c·ª• c√≥ s·∫µn c·ªßa Shopee, Lazada, v.v.")

    for tactic in all_tactics:
        is_recommended = tactic['id'] in recommendations
        
        with st.container(border=is_recommended):
            if is_recommended:
                st.markdown("**‚≠ê ƒê·ªÄ XU·∫§T**")
            st.markdown(f"**{tactic['name']}**")
            st.write(tactic['desc'])
            st.button(
                "Thi·∫øt K·∫ø Chi·∫øn D·ªãch", 
                on_click=select_tactic, 
                args=(tactic['id'], tactic['name'], 'marketplace'), 
                use_container_width=True,
                key=f"tactic_{tactic['id']}",
                type="primary" if is_recommended else "secondary"
            )

def render_dynamic_form(tactic_id, tactic_type):
    st.subheader(f"C·∫•u h√¨nh chi ti·∫øt: {st.session_state.selected_tactic['name']}", divider="blue")

    if tactic_type == 'owned':
        st.multiselect("K√™nh ch·∫°y", ["Email", "SMS", "Zalo OA"], default=["Email"], key="tactic-owned-channels")
        st.text_input("Ti√™u ƒë·ªÅ Email", placeholder="∆Øu ƒë√£i ƒë·∫∑c bi·ªát d√†nh ri√™ng cho b·∫°n!", key="tactic-email-subject")
        
        # THAY ƒê·ªîI CH√çNH: Upload ·∫£nh thay v√¨ link
        uploaded_file = st.file_uploader(
            "T·∫£i l√™n h√¨nh ·∫£nh Banner", 
            type=['png', 'jpg', 'jpeg', 'gif'],
            key="tactic-email-image-uploader",
            help="Ch·ªçn file ·∫£nh t·ª´ m√°y t√≠nh c·ªßa b·∫°n"
        )
        
        # X·ª≠ l√Ω ·∫£nh upload v√† l∆∞u v√†o session state
        if uploaded_file is not None:
            image_base64 = image_to_base64(uploaded_file)
            if image_base64:
                st.session_state['tactic-email-image'] = image_base64
                st.success("‚úÖ ƒê√£ t·∫£i ·∫£nh th√†nh c√¥ng!")
                # Hi·ªÉn th·ªã preview nh·ªè
                st.image(uploaded_file, caption="Preview", width=200)
        elif 'tactic-email-image' not in st.session_state:
            st.session_state['tactic-email-image'] = ''
        
        st.text_area("N·ªôi dung tin nh·∫Øn", placeholder="Ch√†o b·∫°n,\n\nCh√∫ng t√¥i c√≥ m·ªôt ∆∞u ƒë√£i... (B·∫°n c√≥ th·ªÉ d√πng [T√™n] ƒë·ªÉ c√° nh√¢n h√≥a)", key="tactic-email-body")
        st.text_input("Ti√™u ƒë·ªÅ n√∫t b·∫•m (CTA)", placeholder="Xem ngay!", key="tactic-email-button-text")
        st.text_input("Link n√∫t b·∫•m (URL)", placeholder="https://shop.com/san-pham-moi", key="tactic-email-button-url")
    
    elif tactic_type == 'marketplace':
        if tactic_id == 'mp_ads':
            st.text_input("S·∫£n ph·∫©m qu·∫£ng c√°o", placeholder="Vd: √Åo s∆° mi tr·∫Øng", key="tactic-ads-product")
            st.text_input("T·ª´ kh√≥a m·ª•c ti√™u (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)", placeholder="Vd: √°o s∆° mi, s∆° mi c√¥ng s·ªü", key="tactic-ads-keywords")
            st.number_input("CPC mong mu·ªën (VNƒê)", min_value=0, step=100, value=1000, key="tactic-ads-cpc")
        
        elif tactic_id == 'mp_flash_sale':
            st.text_input("S·∫£n ph·∫©m tham gia", placeholder="Vd: Gi√†y da nam", key="tactic-fs-product")
            cols = st.columns(2)
            cols[0].number_input("Gi√° gi·∫£m (VNƒê)", min_value=0, value=199000, key="tactic-fs-price")
            cols[1].number_input("Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng", min_value=0, value=100, key="tactic-fs-limit")
            st.date_input("Ng√†y Flash Sale", key="tactic-fs-date", value=datetime.date.today())
            st.time_input("Gi·ªù Flash Sale", key="tactic-fs-time", value=datetime.time(12, 0))

        elif tactic_id == 'mp_voucher':
            st.selectbox("Lo·∫°i Voucher", ["Gi·∫£m theo %", "Gi·∫£m theo s·ªë ti·ªÅn", "Freeship"], key="tactic-voucher-type")
            cols = st.columns(2)
            cols[0].text_input("M√£ gi·∫£m gi√°", placeholder="SHOPVIP10", key="tactic-voucher-code")
            cols[1].number_input("Gi√° tr·ªã (VND ho·∫∑c %)", min_value=0, value=10, key="tactic-voucher-value")
            cols = st.columns(2)
            cols[0].number_input("ƒê∆°n t·ªëi thi·ªÉu (VNƒê)", min_value=0, value=99000, key="tactic-voucher-min")
            cols[1].number_input("L∆∞·ª£t d√πng t·ªëi ƒëa", min_value=0, value=500, key="tactic-voucher-limit")
        
        elif tactic_id == 'mp_livestream':
            st.text_input("Ti√™u ƒë·ªÅ Livestream", placeholder="Si√™u Sale 11.11 - Gi·∫£m S·ªëc", key="tactic-live-title")
            st.date_input("Ng√†y Livestream", key="tactic-live-date", value=datetime.date.today())
            st.time_input("Gi·ªù Livestream", key="tactic-live-time", value=datetime.time(20, 0))
            st.text_area("K·ªãch b·∫£n / M√¥ t·∫£ ng·∫Øn", key="tactic-live-script")
            st.text_input("Link s·∫£n ph·∫©m ghim (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)", placeholder="link1, link2,...", key="tactic-live-products")

        elif tactic_id == 'mp_combo':
            st.text_input("S·∫£n ph·∫©m ch√≠nh", placeholder="Vd: √Åo s∆° mi", key="tactic-combo-main")
            st.text_input("S·∫£n ph·∫©m ph·ª• (mua k√®m)", placeholder="Vd: C√† v·∫°t", key="tactic-combo-sub")
            st.number_input("Gi√° combo ∆∞u ƒë√£i (VNƒê)", min_value=0, value=249000, key="tactic-combo-price")
        
        else:
            st.info("Chi·∫øn thu·∫≠t n√†y kh√¥ng c·∫ßn c·∫•u h√¨nh chi ti·∫øt.")

def render_step_5():
    st.button("‚¨ÖÔ∏è Quay l·∫°i ch·ªçn Chi·∫øn thu·∫≠t", on_click=go_to_step, args=(4,))
    st.header("B∆∞·ªõc 5: Tr√¨nh D·ª±ng Chi·∫øn D·ªãch (Campaign Builder)", divider="blue")
    st.write("C·∫•u h√¨nh chi ti·∫øt cho chi·∫øn d·ªãch c·ªßa b·∫°n. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o CSDL.")

    # Hi·ªÉn th·ªã modal demo n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t
    if st.session_state.get('show_demo_modal', False):
        render_demo_modal()

    with st.container(border=True):
        render_dynamic_form(st.session_state.selected_tactic['id'], st.session_state.selected_tactic['type'])
    
    st.divider()

    with st.form(key="campaign_builder_form"):
        st.subheader("C·∫•u h√¨nh chung")
        form_data = {}
        cols = st.columns(2)
        
        form_data['campaign-name'] = cols[0].text_input(
            "T√™n Chi·∫øn D·ªãch", 
            value=f"[{st.session_state.selected_tactic['name']}] - {st.session_state.selected_objective['title']}"
        )
        form_data['campaign-segment'] = cols[1].text_input(
            "G·ª≠i ƒê·∫øn (Ph√¢n Kh√∫c / Logic)", 
            value=st.session_state.selected_segment['name'], 
            disabled=True
        )
        
        cols = st.columns(2)
        form_data['campaign-budget'] = cols[0].number_input("T·ªïng Ng√¢n S√°ch (VNƒê)", min_value=0, step=100000, value=0)
        form_data['campaign-kpi'] = cols[1].text_input("M·ª•c Ti√™u KPI", placeholder="V√≠ d·ª•: 50 ƒë∆°n h√†ng")
        
        cols = st.columns(2)
        form_data['campaign-start-date'] = cols[0].date_input("Ng√†y B·∫Øt ƒê·∫ßu", value=datetime.date.today())
        form_data['campaign-end-date'] = cols[1].date_input("Ng√†y K·∫øt Th√∫c", value=datetime.date.today() + datetime.timedelta(days=7))
        
        form_data['campaign-notes'] = st.text_area("Ghi Ch√∫ N·ªôi B·ªô")

        cols_btn = st.columns(2)
        submitted = cols_btn[0].form_submit_button("L∆∞u Chi·∫øn d·ªãch v√†o CSDL", use_container_width=True, type="primary")
        demo_clicked = cols_btn[1].form_submit_button("Xem Demo Chi·∫øn d·ªãch", use_container_width=True, type="secondary")
        
        if submitted:
            for key in st.session_state:
                if key.startswith('tactic-'):
                    form_data[key] = st.session_state[key]
            handle_save_campaign(form_data)
        
        if demo_clicked:
            st.session_state.show_demo_modal = True
            st.rerun()

def render_demo_modal():
    """Hi·ªÉn th·ªã modal demo cho chi·∫øn d·ªãch"""
    
    @st.dialog("üé¨ Xem Demo Chi·∫øn D·ªãch", width="large")
    def show_demo_dialog():
        # Thu th·∫≠p d·ªØ li·ªáu t·ª´ session state
        dynamic_data = {}
        for key in st.session_state:
            if key.startswith('tactic-'):
                dynamic_data[key] = st.session_state[key]
        
        data = {
            'name': "B·∫£n xem tr∆∞·ªõc (Ch∆∞a l∆∞u)",
            'objective': st.session_state.selected_objective.get('title', 'N/A'),
            'dynamicData': dynamic_data,
            'platform': st.session_state.selected_platform
        }
        
        st.header(f"üìß {data.get('name')}")
        st.subheader(f"Ch·ªß ƒë·ªÅ: {data.get('objective')}")
        st.divider()
        
        platform = data.get('platform')
        
        if platform == 'owned':
            subject = dynamic_data.get('tactic-email-subject', '')
            image_data = dynamic_data.get('tactic-email-image', '')
            body = dynamic_data.get('tactic-email-body', '')
            button_text = dynamic_data.get('tactic-email-button-text', '')
            button_url = dynamic_data.get('tactic-email-button-url', '')
            
            st.markdown("### üì¨ N·ªôi dung Email Demo:")
            
            with st.container(border=True):
                if subject:
                    st.markdown(f"**Ti√™u ƒë·ªÅ:** {subject}")
                    st.divider()
                
                if image_data:
                    try:
                        st.image(image_data, use_container_width=True)
                    except Exception:
                        st.warning("Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh banner")
                
                if body:
                    st.markdown("**N·ªôi dung:**")
                    st.write(body.replace('\n', '\n\n'))
                
                if button_text and button_url:
                    st.markdown("---")
                    st.link_button(button_text, button_url, use_container_width=True, type="primary")
                
                st.caption("_Email n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Campaign Manager_")
        else:
            st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh chi ti·∫øt:")
            st.json(dynamic_data, expanded=True)
        
        st.divider()
        if st.button("ƒê√≥ng", use_container_width=True):
            st.session_state.show_demo_modal = False
            st.rerun()
    
    show_demo_dialog()

def render_dashboard_view():
    st.header("üìä B∆∞·ªõc 6: Qu·∫£n tr·ªã Hi·ªáu su·∫•t & T·ªëi ∆∞u (D·ªØ li·ªáu th·∫≠t)", divider="blue")
    st.write("Theo d√µi hi·ªáu su·∫•t c·ªßa t·∫•t c·∫£ c√°c chi·∫øn d·ªãch ƒë√£ l∆∞u trong CSDL.")
        
    if 'editing_campaign_id' in st.session_state:
        render_result_modal()
    
    if 'demo_campaign_id_dashboard' in st.session_state:
        render_dashboard_demo_modal()
        
    campaigns = st.session_state.campaigns
    if not campaigns:
        st.info("Ch∆∞a c√≥ chi·∫øn d·ªãch n√†o trong CSDL. H√£y t·∫°o m·ªôt chi·∫øn d·ªãch m·ªõi!")
        return

    cols = st.columns([3, 2, 1, 1, 1, 1, 1, 1])
    headers = ["T√™n Chi·∫øn D·ªãch", "Ph√¢n Kh√∫c", "Ng√¢n S√°ch", "Doanh Thu", "ROI", "H√†nh ƒê·ªông", "Tr·∫°ng Th√°i", "Demo"]
    for col, header in zip(cols, headers):
        col.markdown(f"**{header}**")
    
    st.divider()

    for i, campaign in enumerate(campaigns):
        budget = campaign.get('budget', 0)
        revenue = campaign.get('revenue', 0)
        roi = "N/A"
        roi_color = "gray"
        
        if budget > 0:
            roi_val = ((revenue - budget) / budget) * 100
            roi = f"{roi_val:.0f}%"
            roi_color = "green" if roi_val >= 0 else "red"
        elif revenue > 0:
            roi = "‚àû"
            roi_color = "green"

        cols = st.columns([3, 2, 1, 1, 1, 1, 1, 1])
        
        cols[0].markdown(f"**{campaign.get('name', 'N/A')}**")
        cols[0].caption(f"{campaign.get('tactic', 'N/A')}")
        
        cols[1].write(campaign.get('segment', 'N/A'))
        cols[2].write(format_currency(budget))
        cols[3].write(format_currency(revenue))
        cols[4].markdown(f"<span style='color:{roi_color}; font-weight:bold;'>{roi}</span>", unsafe_allow_html=True)
        
        campaign_id = campaign['id']
        campaign_status = campaign.get('status', 'N/A')

        with cols[5]:
            if campaign_status == 'üìù ƒê√£ l∆∞u':
                st.button("K√≠ch ho·∫°t", key=f"act_{i}", on_click=activate_campaign, args=(campaign_id,), use_container_width=True)
            elif campaign_status == 'üü¢ ƒêang ch·∫°y':
                st.button("Nh·∫≠p KQ", key=f"res_{i}", on_click=show_result_modal, args=(campaign_id,), use_container_width=True)
            elif campaign_status == 'üü° ƒê√£ k·∫øt th√∫c':
                st.button("Xem/S·ª≠a", key=f"res_{i}", on_click=show_result_modal, args=(campaign_id,), use_container_width=True)
        
        cols[6].write(campaign_status)
        
        with cols[7]:
            if st.button("üëÅÔ∏è", key=f"demo_{i}", help="Xem demo chi·∫øn d·ªãch", use_container_width=True):
                st.session_state.demo_campaign_id_dashboard = campaign_id
                st.rerun()
        
        st.divider()

def render_dashboard_demo_modal():
    """Modal demo cho dashboard"""
    campaign_id = st.session_state.demo_campaign_id_dashboard
    campaign = next((c for c in st.session_state.campaigns if c['id'] == campaign_id), None)
    
    if not campaign:
        del st.session_state.demo_campaign_id_dashboard
        return
    
    @st.dialog("üé¨ Demo Chi·∫øn D·ªãch", width="large")
    def show_dashboard_demo():
        st.header(f"üìß {campaign.get('name')}")
        st.subheader(f"Ch·ªß ƒë·ªÅ: {campaign.get('objective')}")
        st.divider()
        
        dynamic_data = campaign.get('dynamicData', {})
        platform = campaign.get('platform')
        
        if platform == 'owned':
            subject = dynamic_data.get('tactic-email-subject', '')
            image_data = dynamic_data.get('tactic-email-image', '')
            body = dynamic_data.get('tactic-email-body', '')
            button_text = dynamic_data.get('tactic-email-button-text', '')
            button_url = dynamic_data.get('tactic-email-button-url', '')
            
            st.markdown("### üì¨ N·ªôi dung Email:")
            
            with st.container(border=True):
                if subject:
                    st.markdown(f"**Ti√™u ƒë·ªÅ:** {subject}")
                    st.divider()
                
                if image_data:
                    try:
                        st.image(image_data, use_container_width=True)
                    except Exception:
                        st.warning("Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh banner")
                
                if body:
                    st.markdown("**N·ªôi dung:**")
                    st.write(body.replace('\n', '\n\n'))
                
                if button_text and button_url:
                    st.markdown("---")
                    st.link_button(button_text, button_url, use_container_width=True, type="primary")
                
                st.caption("_Email n√†y ƒë∆∞·ª£c g·ª≠i ƒë·∫øn kh√°ch h√†ng t·ª´ h·ªá th·ªëng_")
        else:
            st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh chi ti·∫øt:")
            st.json(dynamic_data, expanded=True)
        
        st.divider()
        if st.button("ƒê√≥ng", use_container_width=True):
            del st.session_state.demo_campaign_id_dashboard
            st.rerun()
    
    show_dashboard_demo()

def render_result_modal():
    """Modal nh·∫≠p k·∫øt qu·∫£ chi·∫øn d·ªãch"""
    if 'editing_campaign_id' in st.session_state:
        campaign_id = st.session_state.editing_campaign_id
        campaign = next((c for c in st.session_state.campaigns if c['id'] == campaign_id), None)
        
        if campaign:
            @st.dialog("üí∞ Nh·∫≠p K·∫øt Qu·∫£ Th·ª±c T·∫ø", width="medium")
            def show_result_dialog():
                st.write(f"Nh·∫≠p doanh thu th·ª±c t·∫ø thu v·ªÅ t·ª´ chi·∫øn d·ªãch **{campaign['name']}** ƒë·ªÉ h·ªá th·ªëng t√≠nh to√°n ROI.")
                
                revenue = st.number_input(
                    "Doanh thu Th·ª±c t·∫ø (VNƒê)", 
                    min_value=0, 
                    value=int(campaign['revenue']) if campaign['revenue'] > 0 else 0,
                    step=100000,
                    key=f"revenue_input_{campaign_id}"
                )
                
                cols = st.columns(2)
                if cols[0].button("L∆∞u K·∫øt Qu·∫£", type="primary", use_container_width=True):
                    save_campaign_result(campaign_id, revenue)
                if cols[1].button("H·ªßy b·ªè", use_container_width=True):
                    del st.session_state.editing_campaign_id
                    st.rerun()
            
            show_result_dialog()

def show():
    """H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi app.py"""
    init_campaign_db()
    init_state()
    render_header_and_nav()
    
    if st.session_state.view == 'wizard':
        render_stepper()
        st.divider()
        
        step = st.session_state.current_step
        if step == 1:
            render_step_1()
        elif step == 2:
            render_step_2()
        elif step == 3:
            render_step_3()
        elif step == 4:
            render_step_4()
        elif step == 5:
            render_step_5()
            
    elif st.session_state.view == 'dashboard':
        st.session_state.current_step = 6
        render_stepper()
        st.divider()
        render_dashboard_view()

if __name__ == "__main__":
    st.set_page_config(layout="wide", page_title="Test Module Chi·∫øn d·ªãch")
    show()