import pandas as pd
import random
from faker import Faker
from datetime import datetime, timedelta, time
import unidecode

# =========================
# ‚öôÔ∏è KH·ªûI T·∫†O
# =========================
fake = Faker("vi_VN")
random.seed(42)

TARGET_ROWS = 50000
START_DATE = datetime(2023, 1, 1)
END_DATE = datetime(2024, 12, 30)
repeat_rate = 0.55

# PH·∫¢I KHAI B√ÅO TR∆Ø·ªöC KHI D√ôNG
num_customers = 10000
num_repeat = int(num_customers * repeat_rate)
num_single = num_customers - num_repeat

# Ngu·ªìn truy c·∫≠p v·ªõi tr·ªçng s·ªë
traffic_sources = [
    ("T·ª± t√¨m ki·∫øm", 40),
    ("B·∫°n b√® gi·ªõi thi·ªáu", 25),
    ("Qu·∫£ng c√°o Facebook", 20),
    ("Email Marketing", 10),
    ("KOL/Influencer", 5)
]

payment_methods = ["COD", "Chuy·ªÉn kho·∫£n", "V√≠ ƒëi·ªán t·ª≠", "Th·∫ª t√≠n d·ª•ng"]

# =========================
# üß© DANH M·ª§C S·∫¢N PH·∫®M
# =========================
sneaker_products = [
    # (T√™n SP, Nh√≥m, NSX, Tr·ªçng s·ªë b√°n, H·ªá s·ªë gi√° th∆∞∆°ng hi·ªáu)
    ("Air Force 1", "Lifestyle", "Nike", 30, 1.2),
    ("Air Jordan 1", "Basketball", "Nike", 25, 1.2),
    ("Yeezy Boost 350", "Lifestyle", "Adidas", 15, 1.0),
    ("Ultraboost 22", "Running", "Adidas", 10, 1.0),
    ("Chuck Taylor All Star", "Classic", "Converse", 8, 0.8),
    ("RS-X", "Lifestyle", "Puma", 5, 0.9),
    ("574 Core", "Lifestyle", "New Balance", 3, 0.85),
    ("FuelCell Rebel", "Running", "New Balance", 2, 0.85),
    ("KD15", "Basketball", "Nike", 1.5, 1.2),
    ("Dame 8", "Basketball", "Adidas", 0.5, 1.0),
]

versions = ["Classic", "Limited Edition", "2023 Edition", "Premium", "Street Style"]

# T·∫°o SKU c·ªë ƒë·ªãnh cho m·ªói s·∫£n ph·∫©m (1 SP = 1 SKU)
sku_dict = {}
sku_counter = 1000
for ten_sp, nhom_sp, nsx, _, _ in sneaker_products:
    sku_counter += 1
    sku_dict[(ten_sp, nsx)] = sku_counter

# =========================
# üí∞ KHUNG GI√Å THEO AOV
# =========================
price_ranges = [
    # (min, max, weight, label)
    (200000, 450000, 50, "Nh·ªè"),
    (600000, 1500000, 35, "Trung b√¨nh"),
    (2000000, 5000000, 15, "Cao"),
]

def get_base_price():
    """L·∫•y gi√° c∆° b·∫£n theo khung AOV"""
    selected = random.choices(price_ranges, weights=[w for _, _, w, _ in price_ranges])[0]
    min_price, max_price, _, _ = selected
    return random.randint(min_price // 100000, max_price // 100000) * 100000

# =========================
# üó∫Ô∏è ƒê·ªäA CH·ªà VI·ªÜT NAM CHI TI·∫æT (T·ªânh > Qu·∫≠n > X√£)
# =========================
locations = {
    ("H√† N·ªôi", 40): {
        "Ba ƒê√¨nh": ["Ph∆∞·ªùng ƒêi·ªán Bi√™n", "Ph∆∞·ªùng ƒê·ªôi C·∫•n", "Ph∆∞·ªùng Ng·ªçc H√†", "Ph∆∞·ªùng Gi·∫£ng V√µ"],
        "Ho√†n Ki·∫øm": ["Ph∆∞·ªùng H√†ng B·∫°c", "Ph∆∞·ªùng H√†ng Gai", "Ph∆∞·ªùng H√†ng Tr·ªëng", "Ph∆∞·ªùng L√Ω Th√°i T·ªï"],
        "Hai B√† Tr∆∞ng": ["Ph∆∞·ªùng B·∫°ch ƒê·∫±ng", "Ph∆∞·ªùng Minh Khai", "Ph∆∞·ªùng Vƒ©nh Tuy", "Ph∆∞·ªùng B√°ch Khoa"],
        "ƒê·ªëng ƒêa": ["Ph∆∞·ªùng VƒÉn Mi·∫øu", "Ph∆∞·ªùng Kh∆∞∆°ng Th∆∞·ª£ng", "Ph∆∞·ªùng L√°ng Th∆∞·ª£ng", "Ph∆∞·ªùng √î Ch·ª£ D·ª´a"],
        "T√¢y H·ªì": ["Ph∆∞·ªùng Nh·∫≠t T√¢n", "Ph∆∞·ªùng Qu·∫£ng An", "Ph∆∞·ªùng Xu√¢n La", "Ph∆∞·ªùng B∆∞·ªüi"],
        "C·∫ßu Gi·∫•y": ["Ph∆∞·ªùng D·ªãch V·ªçng", "Ph∆∞·ªùng Mai D·ªãch", "Ph∆∞·ªùng Nghƒ©a ƒê√¥", "Ph∆∞·ªùng Trung H√≤a"],
        "Thanh Xu√¢n": ["Ph∆∞·ªùng Nh√¢n Ch√≠nh", "Ph∆∞·ªùng Thanh Xu√¢n B·∫Øc", "Ph∆∞·ªùng Kh∆∞∆°ng Mai", "Ph∆∞·ªùng Kim Giang"],
        "Ho√†ng Mai": ["Ph∆∞·ªùng ƒê·∫°i Kim", "Ph∆∞·ªùng ƒê·ªãnh C√¥ng", "Ph∆∞·ªùng Gi√°p B√°t", "Ph∆∞·ªùng Lƒ©nh Nam"],
        "Long Bi√™n": ["Ph∆∞·ªùng Giang Bi√™n", "Ph∆∞·ªùng ƒê·ª©c Giang", "Ph∆∞·ªùng Gia Th·ª•y", "Ph∆∞·ªùng Ng·ªçc L√¢m"],
        "Nam T·ª´ Li√™m": ["Ph∆∞·ªùng M·ªπ ƒê√¨nh 1", "Ph∆∞·ªùng M·ªπ ƒê√¨nh 2", "Ph∆∞·ªùng Trung VƒÉn", "Ph∆∞·ªùng C·∫ßu Di·ªÖn"],
    },
    ("TP HCM", 30): {
        "Qu·∫≠n 1": ["Ph∆∞·ªùng B·∫øn Ngh√©", "Ph∆∞·ªùng B·∫øn Th√†nh", "Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh", "Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o"],
        "Qu·∫≠n 3": ["Ph∆∞·ªùng V√µ Th·ªã S√°u", "Ph∆∞·ªùng 1", "Ph∆∞·ªùng 2", "Ph∆∞·ªùng 9"],
        "B√¨nh Th·∫°nh": ["Ph∆∞·ªùng 1", "Ph∆∞·ªùng 2", "Ph∆∞·ªùng 11", "Ph∆∞·ªùng 22"],
        "Ph√∫ Nhu·∫≠n": ["Ph∆∞·ªùng 1", "Ph∆∞·ªùng 4", "Ph∆∞·ªùng 15", "Ph∆∞·ªùng 17"],
        "Th·ªß ƒê·ª©c": ["Ph∆∞·ªùng Linh Trung", "Ph∆∞·ªùng Linh Xu√¢n", "Ph∆∞·ªùng B√¨nh Th·ªç", "Ph∆∞·ªùng Hi·ªáp B√¨nh Ph∆∞·ªõc"],
        "Qu·∫≠n 7": ["Ph∆∞·ªùng T√¢n Ph√∫", "Ph∆∞·ªùng T√¢n H∆∞ng", "Ph∆∞·ªùng T√¢n Ki·ªÉng", "Ph∆∞·ªùng B√¨nh Thu·∫≠n"],
        "Qu·∫≠n 10": ["Ph∆∞·ªùng 1", "Ph∆∞·ªùng 2", "Ph∆∞·ªùng 4", "Ph∆∞·ªùng 15"],
        "T√¢n B√¨nh": ["Ph∆∞·ªùng 1", "Ph∆∞·ªùng 2", "Ph∆∞·ªùng 4", "Ph∆∞·ªùng 12"],
        "G√≤ V·∫•p": ["Ph∆∞·ªùng 1", "Ph∆∞·ªùng 3", "Ph∆∞·ªùng 8", "Ph∆∞·ªùng 16"],
    },
    ("ƒê√† N·∫µng", 15): {
        "H·∫£i Ch√¢u": ["Ph∆∞·ªùng Th·∫°ch Thang", "Ph∆∞·ªùng H·∫£i Ch√¢u 1", "Ph∆∞·ªùng H√≤a Thu·∫≠n ƒê√¥ng", "Ph∆∞·ªùng Thu·∫≠n Ph∆∞·ªõc"],
        "Thanh Kh√™": ["Ph∆∞·ªùng T√¢n Ch√≠nh", "Ph∆∞·ªùng Thanh Kh√™ ƒê√¥ng", "Ph∆∞·ªùng H√≤a Kh√™", "Ph∆∞·ªùng Vƒ©nh Trung"],
        "S∆°n Tr√†": ["Ph∆∞·ªùng Th·ªç Quang", "Ph∆∞·ªùng N·∫°i Hi√™n ƒê√¥ng", "Ph∆∞·ªùng M√¢n Th√°i", "Ph∆∞·ªùng An H·∫£i B·∫Øc"],
        "Ng≈© H√†nh S∆°n": ["Ph∆∞·ªùng M·ªπ An", "Ph∆∞·ªùng H√≤a H·∫£i", "Ph∆∞·ªùng H√≤a Qu√Ω", "Ph∆∞·ªùng Khu√™ M·ªπ"],
        "Li√™n Chi·ªÉu": ["Ph∆∞·ªùng H√≤a Hi·ªáp B·∫Øc", "Ph∆∞·ªùng H√≤a Kh√°nh B·∫Øc", "Ph∆∞·ªùng H√≤a Minh"],
    },
    ("H·∫£i Ph√≤ng", 8): {
        "H·ªìng B√†ng": ["Ph∆∞·ªùng Qu√°n Toan", "Ph∆∞·ªùng H√πng V∆∞∆°ng", "Ph∆∞·ªùng S·ªü D·∫ßu", "Ph∆∞·ªùng Phan B·ªôi Ch√¢u"],
        "Ng√¥ Quy·ªÅn": ["Ph∆∞·ªùng M√°y Chai", "Ph∆∞·ªùng C·∫ßu ƒê·∫•t", "Ph∆∞·ªùng L·∫°ch Tray", "Ph∆∞·ªùng ƒê√¥ng Kh√™"],
        "L√™ Ch√¢n": ["Ph∆∞·ªùng C√°t D√†i", "Ph∆∞·ªùng An Bi√™n", "Ph∆∞·ªùng Tr·∫ßn Nguy√™n H√£n", "Ph∆∞·ªùng H·ªì Nam"],
        "H·∫£i An": ["Ph∆∞·ªùng ƒê√¥ng H·∫£i 1", "Ph∆∞·ªùng ƒê√¥ng H·∫£i 2", "Ph∆∞·ªùng ƒê·∫±ng L√¢m", "Ph∆∞·ªùng Nam H·∫£i"],
    },
    ("C·∫ßn Th∆°", 7): {
        "Ninh Ki·ªÅu": ["Ph∆∞·ªùng C√°i Kh·∫ø", "Ph∆∞·ªùng An H√≤a", "Ph∆∞·ªùng Th·ªõi B√¨nh", "Ph∆∞·ªùng An Nghi·ªáp"],
        "B√¨nh Th·ªßy": ["Ph∆∞·ªùng B√¨nh Th·ªßy", "Ph∆∞·ªùng Tr√† An", "Ph∆∞·ªùng Tr√† N√≥c", "Ph∆∞·ªùng Long H√≤a"],
        "C√°i RƒÉng": ["Ph∆∞·ªùng L√™ B√¨nh", "Ph∆∞·ªùng H∆∞ng Ph√∫", "Ph∆∞·ªùng H∆∞ng Th·∫°nh", "Ph∆∞·ªùng Ba L√°ng"],
        "√î M√¥n": ["Ph∆∞·ªùng Ch√¢u VƒÉn Li√™m", "Ph∆∞·ªùng Th·ªõi H√≤a", "Ph∆∞·ªùng Th·ªõi Long", "Ph∆∞·ªùng Tr∆∞·ªùng L·∫°c"],
    },
}

# =========================
# üë• T·∫†O T√äN KH√ÅCH H√ÄNG
# =========================
ho_list = [
    "Nguy·ªÖn", "Tr·∫ßn", "L√™", "Ph·∫°m", "Ho√†ng", "Hu·ª≥nh", "Phan", "V≈©", "V√µ",
    "ƒê·∫∑ng", "B√πi", "ƒê·ªó", "H·ªì", "Ng√¥", "D∆∞∆°ng", "L√Ω", "T·∫°", "Tr∆∞∆°ng", "Mai", "ƒêo√†n"
]
dem_nam = ["VƒÉn", "Qu·ªëc", "Tu·∫•n", "M·∫°nh", "ƒê√¨nh", "H·∫£i", "Trung", "Thi·ªán", "Minh", "Anh", "Ho√†ng", "ƒê·ª©c", "C√¥ng", "Xu√¢n", "Duy"]
dem_nu = ["Th·ªã", "Ng·ªçc", "Thu", "Di·ªáu", "B·∫£o", "Th√πy", "H·ªìng", "Ph√∫c", "Thanh", "Kh√°nh", "√Ånh", "Kim", "Huy·ªÅn", "My", "Nh∆∞"]
ten_nam = ["Nam", "D≈©ng", "Tu·∫•n", "Qu√¢n", "Huy", "S∆°n", "ƒê·∫°t", "Tr√≠", "ƒê·ª©c", "Long", "T√†i", "Khang", "Ph√∫c", "Ki√™n", "C∆∞·ªùng", "B√¨nh", "Th·∫Øng", "Ho√†ng", "Anh"]
ten_nu = ["Hoa", "T√¢m", "H√†", "Trang", "H∆∞∆°ng", "Lan", "Ph∆∞∆°ng", "Linh", "Giang", "Ng√¢n", "Vy", "T√∫", "H·∫°nh", "Th·∫£o", "Y·∫øn", "Nhung", "Ch√¢u", "Mai", "Dung", "Nhi"]

print("üîÑ ƒêang t·∫°o danh s√°ch kh√°ch h√†ng...")

# T·∫°o pool t√™n tr∆∞·ªõc
name_pool_nam = [(f"{ho} {dem} {ten}", "Nam") 
                 for ho in ho_list 
                 for dem in dem_nam 
                 for ten in ten_nam]
name_pool_nu = [(f"{ho} {dem} {ten}", "N·ªØ") 
                for ho in ho_list 
                for dem in dem_nu 
                for ten in ten_nu]

# Shuffle ƒë·ªÉ random
random.shuffle(name_pool_nam)
random.shuffle(name_pool_nu)

# L·∫•y theo t·ª∑ l·ªá 70% Nam, 30% N·ªØ
num_male = int(num_customers * 0.7)
num_female = num_customers - num_male

# N·∫øu kh√¥ng ƒë·ªß t√™n, l·∫∑p l·∫°i pool
while len(name_pool_nam) < num_male:
    name_pool_nam.extend(name_pool_nam[:num_male - len(name_pool_nam)])
while len(name_pool_nu) < num_female:
    name_pool_nu.extend(name_pool_nu[:num_female - len(name_pool_nu)])

unique_names = name_pool_nam[:num_male] + name_pool_nu[:num_female]
random.shuffle(unique_names)

print(f"‚úÖ ƒê√£ t·∫°o {len(unique_names)} kh√°ch h√†ng")

# =========================
# üìÖ H√ÄM SINH NG√ÄY + GI·ªú MUA
# =========================
def generate_purchase_datetime(start, end, recency_weight):
    """Sinh ng√†y gi·ªù mua v·ªõi ∆∞u ti√™n cu·ªëi tu·∫ßn v√† gi·ªù v√†ng"""
    # X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian d·ª±a tr√™n recency
    if recency_weight > 0.7:
        days_range = 180
        base_date = end - timedelta(days=days_range)
    elif recency_weight > 0.5:
        days_range = 365
        base_date = end - timedelta(days=days_range)
    else:
        days_range = 365
        base_date = start + timedelta(days=180)
    
    max_attempts = 100
    for _ in range(max_attempts):
        random_date = base_date + timedelta(days=random.randint(0, min(days_range, (end - base_date).days)))
        weekday = random_date.weekday()
        
        # L·ªçc theo ng√†y trong tu·∫ßn
        if weekday == 4 and random.random() < 0.85:  # T6
            break
        elif weekday == 5 and random.random() < 0.90:  # T7
            break
        elif weekday == 6 and random.random() < 0.88:  # CN
            break
        elif random.random() < 0.35:  # Ng√†y th∆∞·ªùng
            break
    else:
        random_date = base_date + timedelta(days=random.randint(0, min(days_range, (end - base_date).days)))
    
    # Sinh gi·ªù mua: 8h-22h, ∆∞u ti√™n 20h-22h (gi·ªù v√†ng)
    hour_weights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1]  # 15 gi√° tr·ªã cho 8h-22h
    hour = random.choices(range(8, 23), weights=hour_weights)[0]
    minute = random.randint(0, 59)
    
    return datetime.combine(random_date, time(hour, minute))

# =========================
# üéÇ H√ÄM SINH NG√ÄY SINH
# =========================
def generate_birthday():
    """Sinh ng√†y sinh, ∆∞u ti√™n 20-22 tu·ªïi"""
    age_ranges = [
        (20, 22, 45),
        (23, 25, 25),
        (26, 30, 15),
        (18, 19, 8),
        (31, 35, 5),
        (36, 45, 2),
    ]
    
    selected = random.choices(age_ranges, weights=[w for _, _, w in age_ranges])[0]
    min_age, max_age, _ = selected
    
    birth_year = 2024 - random.randint(min_age, max_age)
    return fake.date_between(datetime(birth_year, 1, 1), datetime(birth_year, 12, 31))

# =========================
# üè™ H√ÄM CH·ªåN ƒê·ªäA ƒêI·ªÇM
# =========================
def select_location():
    """Ch·ªçn ƒë·ªãa ƒëi·ªÉm: T·ªânh > Qu·∫≠n > X√£"""
    location_keys = list(locations.keys())
    weights = [weight for _, weight in location_keys]
    selected_key = random.choices(location_keys, weights=weights)[0]
    tinh, _ = selected_key
    
    districts = locations[selected_key]
    quan = random.choice(list(districts.keys()))
    xa = random.choice(districts[quan])
    
    return tinh, quan, xa

# =========================
# üõçÔ∏è H√ÄM CH·ªåN S·∫¢N PH·∫®M
# =========================
def select_products(monetary_factor):
    """Ch·ªçn s·∫£n ph·∫©m cho ƒë∆°n h√†ng"""
    weights = [weight for _, _, _, weight, _ in sneaker_products]
    num_products = random.choices([1, 2, 3, 4], weights=[60, 25, 10, 5])[0]
    
    selected = []
    for _ in range(num_products):
        product = random.choices(sneaker_products, weights=weights)[0]
        ten_sp, nhom_sp, nsx, _, brand_factor = product
        
        sku = sku_dict[(ten_sp, nsx)]
        
        # Ki·ªÉm tra SKU tr√πng -> g·ªôp s·ªë l∆∞·ª£ng
        existing = next((p for p in selected if p['sku'] == sku), None)
        if existing:
            existing['soluong'] += random.choices([1, 2, 3], weights=[60, 30, 10])[0]
        else:
            soluong = random.choices([1, 2, 3], weights=[60, 30, 10])[0]
            
            # T√≠nh gi√°
            base_price = get_base_price()
            gia = int(base_price * brand_factor * monetary_factor)
            
            # 10% s·∫£n ph·∫©m premium
            if random.random() < 0.1:
                gia = int(gia * random.uniform(1.5, 2.5))
            
            phien_ban = random.choice(versions)
            
            selected.append({
                'ten_sp': ten_sp,
                'nhom_sp': nhom_sp,
                'nsx': nsx,
                'sku': sku,
                'phien_ban': phien_ban,
                'soluong': soluong,
                'gia': gia
            })
    
    return selected

# =========================
# PH√ÇN KH√öC KH√ÅCH H√ÄNG RFM
# =========================
customer_segments = []

# Champion (10% of repeat)
for _ in range(int(num_repeat * 0.10)):
    customer_segments.append({
        'type': 'champion',
        'num_orders': random.randint(8, 15),
        'recency_weight': 0.9,
        'monetary_factor': random.uniform(1.5, 3.0)
    })

# Loyal (25% of repeat)
for _ in range(int(num_repeat * 0.25)):
    customer_segments.append({
        'type': 'loyal',
        'num_orders': random.randint(5, 8),
        'recency_weight': 0.7,
        'monetary_factor': random.uniform(1.2, 1.8)
    })

# Potential (30% of repeat)
for _ in range(int(num_repeat * 0.30)):
    customer_segments.append({
        'type': 'potential',
        'num_orders': random.randint(3, 5),
        'recency_weight': 0.6,
        'monetary_factor': random.uniform(1.0, 1.5)
    })

# Recent (20% of repeat)
for _ in range(int(num_repeat * 0.20)):
    customer_segments.append({
        'type': 'recent',
        'num_orders': random.randint(2, 3),
        'recency_weight': 0.8,
        'monetary_factor': random.uniform(0.8, 1.2)
    })

# At Risk (15% of repeat)
for _ in range(num_repeat - len(customer_segments)):
    customer_segments.append({
        'type': 'at_risk',
        'num_orders': random.randint(3, 6),
        'recency_weight': 0.2,
        'monetary_factor': random.uniform(1.0, 1.5)
    })

# Single customers
for _ in range(num_single):
    customer_segments.append({
        'type': 'single',
        'num_orders': 1,
        'recency_weight': random.uniform(0.3, 0.9),
        'monetary_factor': random.uniform(0.5, 1.5)
    })

random.shuffle(customer_segments)

print(f"‚úÖ ƒê√£ t·∫°o {len(customer_segments)} ph√¢n kh√∫c kh√°ch h√†ng")

# =========================
# SINH D·ªÆ LI·ªÜU
# =========================
data = []
order_id_counter = 200000
customer_id_counter = 1

print("\nüîÑ ƒêang sinh d·ªØ li·ªáu ƒë∆°n h√†ng...")
progress_step = max(1, len(customer_segments) // 10)

for i, segment in enumerate(customer_segments):
    if len(data) >= TARGET_ROWS:
        break
    
    # Hi·ªÉn th·ªã ti·∫øn tr√¨nh
    if i > 0 and i % progress_step == 0:
        print(f"  ‚è≥ ƒê√£ x·ª≠ l√Ω {i}/{len(customer_segments)} kh√°ch h√†ng ({len(data):,} d√≤ng)")
    
    name, gender = unique_names[i]
    email = unidecode.unidecode(name).replace(" ", ".").lower() + "@gmail.com"
    birthday = generate_birthday()
    sdt = "0" + str(random.randint(900000000, 999999999))
    khachhang_id = customer_id_counter
    customer_id_counter += 1
    
    num_orders = segment['num_orders']
    recency_weight = segment['recency_weight']
    monetary_factor = segment['monetary_factor']
    
    # Sinh c√°c ƒë∆°n h√†ng
    for _ in range(num_orders):
        if len(data) >= TARGET_ROWS:
            break
        
        order_id_counter += 1
        ma_don = order_id_counter
        
        # Sinh th·ªùi gian mua
        thoi_gian_mua = generate_purchase_datetime(START_DATE, END_DATE, recency_weight)
        ngay_mua_str = thoi_gian_mua.strftime("%d/%m/%Y")
        thoi_gian_mua_str = thoi_gian_mua.strftime("%d/%m/%Y %H:%M")
        
        # Ch·ªçn traffic, ƒë·ªãa ƒëi·ªÉm
        traffic = random.choices([t for t, _ in traffic_sources], weights=[w for _, w in traffic_sources])[0]
        tinh, quan, xa = select_location()
        pttt = random.choice(payment_methods)
        
        # Ch·ªçn s·∫£n ph·∫©m
        products = select_products(monetary_factor)
        
        # T·∫°o d√≤ng cho m·ªói s·∫£n ph·∫©m
        for product in products:
            gia = product['gia']
            soluong = product['soluong']
            
            doanh_thu = gia * soluong
            khuyenmai = int(doanh_thu * random.uniform(0, 0.3))
            van_chuyen = random.choice([0, 15000, 20000, 30000, 40000])
            doanh_thu_thuan = doanh_thu - khuyenmai - van_chuyen
            
            data.append([
                khachhang_id, name, email, sdt, gender, birthday.strftime("%d/%m/%Y"),
                ma_don, ngay_mua_str, thoi_gian_mua_str, traffic, tinh, quan, xa,
                product['ten_sp'], product['nhom_sp'], product['sku'], product['phien_ban'], product['nsx'],
                pttt, soluong, gia, doanh_thu, khuyenmai, van_chuyen, doanh_thu_thuan
            ])

print(f"\n‚úÖ ƒê√£ sinh {len(data):,} d√≤ng d·ªØ li·ªáu")

# =========================
# XU·∫§T D·ªÆ LI·ªÜU
# =========================
columns = [
    "KhachHangID", "HoTen", "Email", "SDT", "GioiTinh", "NgaySinh",
    "MaDonHang", "NgayMua", "ThoiGianMua", "Traffic", "TinhThanh", "QuanHuyen", "PhuongXa",
    "TenSanPham", "TenNhomSanPham", "SKU", "PhienBan", "NhaSanXuat",
    "PhuongThucTT", "SoLuong", "GiaSP", "DoanhThu", "TienKhuyenMai",
    "VanChuyen", "DoanhThuThuan"
]

print("üìù ƒêang t·∫°o DataFrame...")
df = pd.DataFrame(data, columns=columns)
df["KhachHangID"] = df["KhachHangID"].astype(str)

print("üíæ ƒêang xu·∫•t file Excel...")
df.to_excel("sneaker_sales_data_final.xlsx", index=False)

# =========================
# TH·ªêNG K√ä
# =========================
print("\n" + "=" * 70)
print("‚úÖ SINH D·ªÆ LI·ªÜU TH√ÄNH C√îNG - SNEAKER SALES DATA")
print("=" * 70)

num_customers_actual = df["KhachHangID"].nunique()
num_orders = df["MaDonHang"].nunique()
repeat_customers = df.groupby("KhachHangID")["MaDonHang"].nunique()
ty_le_quay_lai = (repeat_customers[repeat_customers > 1].count() / num_customers_actual) * 100

print(f"\nüìä TH·ªêNG K√ä T·ªîNG QUAN:")
print(f"  ‚Ä¢ T·ªïng s·ªë d√≤ng: {len(df):,}")
print(f"  ‚Ä¢ S·ªë ƒë∆°n h√†ng: {num_orders:,}")
print(f"  ‚Ä¢ S·ªë kh√°ch h√†ng: {num_customers_actual:,}")
print(f"  ‚Ä¢ T·ª∑ l·ªá kh√°ch quay l·∫°i: {ty_le_quay_lai:.2f}%")
print(f"  ‚Ä¢ Doanh thu thu·∫ßn trung b√¨nh: {df['DoanhThuThuan'].mean():,.0f} VNƒê")

# Gi·ªõi t√≠nh
gender_dist = df.groupby('GioiTinh')['KhachHangID'].nunique()
print(f"\nüë• PH√ÇN B·ªê GI·ªöI T√çNH:")
for gender, count in gender_dist.items():
    pct = (count / num_customers_actual) * 100
    print(f"  ‚Ä¢ {gender}: {count:,} KH ({pct:.1f}%)")

# Ng√†y trong tu·∫ßn
df['NgayMuaDate'] = pd.to_datetime(df['NgayMua'], format='%d/%m/%Y')
df['DayOfWeek'] = df['NgayMuaDate'].dt.dayofweek
day_names = {0: 'T2', 1: 'T3', 2: 'T4', 3: 'T5', 4: 'T6', 5: 'T7', 6: 'CN'}
weekday_dist = df.groupby('DayOfWeek')['MaDonHang'].nunique()
print(f"\nüìÖ PH√ÇN B·ªê THEO NG√ÄY TRONG TU·∫¶N:")
for day, count in weekday_dist.items():
    pct = (count / num_orders) * 100
    print(f"  ‚Ä¢ {day_names[day]}: {count:,} ƒë∆°n ({pct:.1f}%)")

# Gi·ªù mua h√†ng
df['ThoiGianMuaDT'] = pd.to_datetime(df['ThoiGianMua'], format='%d/%m/%Y %H:%M')
df['Hour'] = df['ThoiGianMuaDT'].dt.hour
hour_dist = df.groupby('Hour')['MaDonHang'].nunique()
print(f"\n‚è∞ PH√ÇN B·ªê GI·ªú MUA (TOP 5):")
for hour, count in hour_dist.sort_values(ascending=False).head(5).items():
    pct = (count / num_orders) * 100
    print(f"  ‚Ä¢ {hour}h: {count:,} ƒë∆°n ({pct:.1f}%)")

# ƒê·ªô tu·ªïi
df['NgaySinhDate'] = pd.to_datetime(df['NgaySinh'], format='%d/%m/%Y')
df['Age'] = 2024 - df['NgaySinhDate'].dt.year
age_bins = [0, 20, 23, 26, 31, 100]
age_labels = ['<20', '20-22', '23-25', '26-30', '31+']
df['AgeGroup'] = pd.cut(df['Age'], bins=age_bins, labels=age_labels, right=False)
age_dist = df.groupby('AgeGroup')['KhachHangID'].nunique()
print(f"\nüéÇ PH√ÇN B·ªê ƒê·ªò TU·ªîI:")
for age_group, count in age_dist.items():
    pct = (count / num_customers_actual) * 100
    print(f"  ‚Ä¢ {age_group} tu·ªïi: {count:,} KH ({pct:.1f}%)")

# Khu v·ª±c
location_dist = df.groupby('TinhThanh')['MaDonHang'].nunique().sort_values(ascending=False)
print(f"\nüó∫Ô∏è PH√ÇN B·ªê THEO KHU V·ª∞C:")
for tinh, count in location_dist.items():
    pct = (count / num_orders) * 100
    print(f"  ‚Ä¢ {tinh}: {count:,} ƒë∆°n ({pct:.1f}%)")

# Traffic
traffic_dist = df.groupby('Traffic')['MaDonHang'].nunique().sort_values(ascending=False)
print(f"\nüì± NGU·ªíN TRUY C·∫¨P:")
for traffic, count in traffic_dist.items():
    pct = (count / num_orders) * 100
    print(f"  ‚Ä¢ {traffic}: {count:,} ƒë∆°n ({pct:.1f}%)")

# S·∫£n ph·∫©m
product_dist = df.groupby('TenSanPham')['SoLuong'].sum().sort_values(ascending=False)
print(f"\nüõçÔ∏è TOP 5 S·∫¢N PH·∫®M B√ÅN CH·∫†Y:")
for i, (product, qty) in enumerate(product_dist.head(5).items(), 1):
    pct = (qty / df['SoLuong'].sum()) * 100
    print(f"  {i}. {product}: {qty:,} sp ({pct:.1f}%)")

# Th∆∞∆°ng hi·ªáu
brand_dist = df.groupby('NhaSanXuat')['DoanhThu'].sum().sort_values(ascending=False)
print(f"\nüè∑Ô∏è DOANH THU THEO TH∆Ø∆†NG HI·ªÜU:")
for brand, revenue in brand_dist.items():
    pct = (revenue / df['DoanhThu'].sum()) * 100
    print(f"  ‚Ä¢ {brand}: {revenue:,.0f} VNƒê ({pct:.1f}%)")

# SKU
print(f"\nüîñ TH·ªêNG K√ä SKU:")
print(f"  ‚Ä¢ S·ªë SKU duy nh·∫•t: {df['SKU'].nunique()}")
print(f"  ‚Ä¢ S·ªë s·∫£n ph·∫©m duy nh·∫•t: {df['TenSanPham'].nunique()}")

# S·∫£n ph·∫©m tr√™n ƒë∆°n
products_per_order = df.groupby('MaDonHang').size()
print(f"\nüì¶ S·∫¢N PH·∫®M TR√äN M·ªñI ƒê∆†N:")
for num_products in sorted(products_per_order.unique()):
    count = (products_per_order == num_products).sum()
    pct = (count / num_orders) * 100
    print(f"  ‚Ä¢ {num_products} SP: {count:,} ƒë∆°n ({pct:.1f}%)")

# Ph√¢n t√≠ch RFM
print(f"\nüíé PH√ÇN T√çCH RFM:")
rfm = df.groupby('KhachHangID').agg({
    'NgayMuaDate': 'max',
    'MaDonHang': 'nunique',
    'DoanhThuThuan': 'sum'
})
rfm['Recency'] = (df['NgayMuaDate'].max() - rfm['NgayMuaDate']).dt.days
rfm['Frequency'] = rfm['MaDonHang']
rfm['Monetary'] = rfm['DoanhThuThuan']

print(f"  ‚Ä¢ Recency trung b√¨nh: {rfm['Recency'].mean():.0f} ng√†y")
print(f"  ‚Ä¢ Frequency trung b√¨nh: {rfm['Frequency'].mean():.2f} ƒë∆°n/KH")
print(f"  ‚Ä¢ Monetary trung b√¨nh: {rfm['Monetary'].mean():,.0f} VNƒê/KH")

# Ph√¢n kh√∫c kh√°ch h√†ng
order_counts = df.groupby('KhachHangID')['MaDonHang'].nunique()
print(f"\nüë• PH√ÇN KH√öC KH√ÅCH H√ÄNG:")
segments = {
    'Champions (8-15 ƒë∆°n)': (order_counts >= 8).sum(),
    'Loyal (5-7 ƒë∆°n)': ((order_counts >= 5) & (order_counts < 8)).sum(),
    'Potential (3-4 ƒë∆°n)': ((order_counts >= 3) & (order_counts < 5)).sum(),
    'Recent (2 ƒë∆°n)': (order_counts == 2).sum(),
    'Single (1 ƒë∆°n)': (order_counts == 1).sum(),
}
for segment_name, count in segments.items():
    pct = (count / num_customers_actual) * 100
    print(f"  ‚Ä¢ {segment_name}: {count:,} KH ({pct:.1f}%)")

print("\n" + "=" * 70)
print("üéâ Ho√†n t·∫•t! File: sneaker_sales_data_final.xlsx")
print("=" * 70)