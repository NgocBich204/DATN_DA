import streamlit as st
import pandas as pd
import datetime
import pyodbc
import numpy as np
import math 

# --- C·∫§U H√åNH K·∫æT N·ªêI SQL SERVER ---
odbc_driver = "ODBC Driver 17 for SQL Server"
server = "localhost\\SQLEXPRESS"
database = "test6"
encrypt = "yes"
trust_server_certificate = "yes"

conn_str = (
    f"Driver={{{odbc_driver}}};"
    f"Server={server};"
    f"Database={database};"
    "Trusted_Connection=yes;"
    f"Encrypt={encrypt};"
    f"TrustServerCertificate={trust_server_certificate};"
)

# --- C·∫§U H√åNH TRANG ---
st.set_page_config(
    page_title="Tra c·ª©u kh√°ch h√†ng 360¬∞",
    layout="wide",
    page_icon="üë§"
)

# H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá (Helper)
def format_currency(value):
    if pd.isna(value): return "0 ‚Ç´"
    return f"{value:,.0f} ‚Ç´".replace(",", ".")

# --- CACHING D·ªÆ LI·ªÜU T·ª™ DB (T·ªêI ∆ØU H√ìA T·ªêC ƒê·ªò T·∫¢I) ---
@st.cache_data(ttl=600)
def load_customer_data_from_db():
    """Load d·ªØ li·ªáu Kh√°ch h√†ng, RFM, Ph√¢n kh√∫c v√† L·ªãch s·ª≠ ƒë∆°n h√†ng t·ª´ SQL Server."""
    try:
        conn = pyodbc.connect(conn_str)
        
        # 1. L·∫•y th√¥ng tin c∆° b·∫£n v√† ph√¢n kh√∫c (DimKhachHang + Customer_Segmentation)
        query_customers = """
        SELECT
            dk.KhachHangID, 
            dk.HoTen AS name,
            dk.SDT AS phone,
            dk.Email AS email,
            dk.TinhThanh,
            dk.QuanHuyen,
            dk.Traffic AS fav_channel,
            dk.NgaySinh,
            cs.PhanKhuc AS group_name,
            cs.Recency,
            cs.Frequency,
            cs.Monetary
        FROM dbo.DimKhachHang dk
        LEFT JOIN dbo.Customer_Segmentation cs ON dk.KhachHangID = cs.KhachHangID
        """
        df_customers = pd.read_sql(query_customers, conn)
        
        # 2. L·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng cu·ªëi c√πng v√† t·ªïng chi ti√™u (FactDonHang + DimDate)
        query_summary = """
        SELECT 
            KhachHangID,
            MAX(d.NgayMua) AS LastPurchaseDate,
            COUNT(DISTINCT f.DonHang) AS TotalOrders,
            SUM(f.DoanhThuThuan) AS TotalSpend
        FROM dbo.FactDonHang f
        JOIN dbo.DimDate d ON f.DateID = d.DateID
        GROUP BY KhachHangID
        """
        df_summary = pd.read_sql(query_summary, conn)

        # 3. Join d·ªØ li·ªáu l·∫°i (Merge tr√™n KhachHangID)
        df = pd.merge(df_customers, df_summary, on='KhachHangID', how='left')
        
        # √âp ki·ªÉu r√µ r√†ng c√°c c·ªôt ng√†y th√°ng v·ªÅ datetime
        df['NgaySinh'] = pd.to_datetime(df['NgaySinh'], errors='coerce')
        df['LastPurchaseDate'] = pd.to_datetime(df['LastPurchaseDate'], errors='coerce')

        # 4. Chu·∫©n h√≥a d·ªØ li·ªáu hi·ªÉn th·ªã
        df['registered'] = df['NgaySinh'].dt.strftime('%d/%m/%Y').fillna('N/A')
        df['address'] = df['QuanHuyen'].fillna('N/A') + ", " + df['TinhThanh'].fillna('N/A')
        df['region'] = np.select(
            [df['TinhThanh'].str.contains('H√† N·ªôi|H·∫£i Ph√≤ng', na=False),
             df['TinhThanh'].str.contains('ƒê√† N·∫µng|Hu·∫ø', na=False),
             df['TinhThanh'].str.contains('H·ªì Ch√≠ Minh|C·∫ßn Th∆°', na=False)],
            ['Mi·ªÅn B·∫Øc', 'Mi·ªÅn Trung', 'Mi·ªÅn Nam'],
            default='Kh√°c'
        )
        df['group_name'] = df['group_name'].fillna('Ch∆∞a ph√¢n nh√≥m')
        
        # T√≠nh to√°n
        df['last_purchase'] = df['LastPurchaseDate'].dt.strftime('%d/%m/%Y').fillna('N/A')
        df['total_orders'] = df['TotalOrders'].fillna(0).astype(int)
        df['total_spend'] = df['TotalSpend'].fillna(0)
        df['avg_order_value'] = np.where(df['total_orders'] > 0, 
                                          df['total_spend'] / df['total_orders'], 
                                          0)
        
        df['total_spend_str'] = df['total_spend'].apply(format_currency)
        df['avg_order_value_str'] = df['avg_order_value'].apply(format_currency)

        # === ƒêI·ªÄU CH·ªàNH LOGIC G√ÅN T√åNH TR·∫†NG D·ª∞A TR√äN PH√ÇN KH√öC (GROUP NAME) ===
        df['status'] = np.select(
            [
                df['group_name'].str.contains('VIP', na=False),
                df['group_name'].str.contains('trung th√†nh|·ªïn ƒë·ªãnh', na=False),
                df['group_name'].str.contains('ti·ªÅm nƒÉng|m·ªõi', case=False, na=False),
                df['group_name'].str.contains('nguy c∆° m·∫•t|chƒÉm s√≥c|y·∫øu', case=False, na=False),
            ],
            [
                'R·∫•t quan tr·ªçng', 
                'Ho·∫°t ƒë·ªông th∆∞·ªùng xuy√™n', 
                'Ti·ªÅm nƒÉng', 
                'C·∫ßn chƒÉm s√≥c'
            ],
            default='√çt ho·∫°t ƒë·ªông' # M·∫∑c ƒë·ªãnh cho Kh√°ch h√†ng √≠t/Ch∆∞a ph√¢n nh√≥m
        )
        # =========================================================================

        # Ch·ªâ l·∫•y c√°c c·ªôt c·∫ßn thi·∫øt cho giao di·ªán
        CUSTOMER_DATA = df[[
            "KhachHangID", "name", "total_orders", "total_spend_str", "avg_order_value_str", 
            "last_purchase", "fav_channel", "group_name", "phone", "email", 
            "address", "region", "registered", "status", "Recency", "Frequency", "Monetary"
        ]].rename(columns={'group_name': 'group', 'KhachHangID': 'id'})

        # 5. L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng (Order History)
        query_orders = """
        SELECT 
            f.KhachHangID,
            f.DonHang AS "M√É ƒêH",
            d.NgayMua,
            sp.TenSanPham AS "S·∫£n Ph·∫©m",
            f.SoLuong AS "SL",
            f.DoanhThuThuan AS "DoanhThuThuan",
            dk.Traffic AS "K√™nh"
        FROM dbo.FactDonHang f
        JOIN dbo.DimDate d ON f.DateID = d.DateID
        JOIN dbo.DimSP sp ON f.SPID = sp.SPID
        JOIN dbo.DimKhachHang dk ON f.KhachHangID = dk.KhachHangID
        ORDER BY d.NgayMua DESC
        """
        df_orders = pd.read_sql(query_orders, conn)
        
        df_orders['NgayMua'] = pd.to_datetime(df_orders['NgayMua'], errors='coerce')
        
        df_orders['Ng√†y Mua'] = df_orders['NgayMua'].dt.strftime('%d/%m/%Y %H:%M:%S')
        df_orders['Th√†nh Ti·ªÅn'] = df_orders['DoanhThuThuan'].apply(format_currency)
        
        agg_orders = df_orders.groupby(['KhachHangID', 'M√É ƒêH', 'Ng√†y Mua', 'SL', 'Th√†nh Ti·ªÅn', 'K√™nh'])['S·∫£n Ph·∫©m'].apply(lambda x: ', '.join(x.astype(str).unique())).reset_index()
        ORDER_HISTORY_DATA = agg_orders[['KhachHangID', 'M√É ƒêH', 'Ng√†y Mua', 'S·∫£n Ph·∫©m', 'SL', 'Th√†nh Ti·ªÅn', 'K√™nh']]

        conn.close()
        return CUSTOMER_DATA, ORDER_HISTORY_DATA

    except Exception as e:
        error_msg = str(e)
        if 'ODBC Driver' in error_msg or 'Login failed' in error_msg:
             st.error("L·ªói k·∫øt n·ªëi CSDL: Vui l√≤ng ki·ªÉm tra t√™n Server, Database, ho·∫∑c Driver ODBC ƒë√£ c√†i ƒë·∫∑t.")
        else:
             st.error(f"L·ªói truy v·∫•n CSDL: {error_msg}")
        return pd.DataFrame(), pd.DataFrame() 

# T·∫£i d·ªØ li·ªáu
CUSTOMER_DATA, ORDER_HISTORY_DATA = load_customer_data_from_db()
CUSTOMER_LIST = CUSTOMER_DATA.to_dict('records')


# --- TR·∫†NG TH√ÅI ·ª®NG D·ª§NG (SESSION STATE) ---
if 'view' not in st.session_state:
    st.session_state.view = 'list' 
if 'selected_customer_id' not in st.session_state:
    st.session_state.selected_customer_id = None
if 'search_term' not in st.session_state:
    st.session_state.search_term = ""
if 'page' not in st.session_state:
    st.session_state.page = 0 

# --- H√ÄM H·ªñ TR·ª¢ (HELPER FUNCTIONS) ---
def get_badge_markdown(text_value):
    """
    G√°n m√†u s·∫Øc cho c·∫£ Nh√≥m KH (Ph√¢n kh√∫c) v√† T√¨nh tr·∫°ng (Status)
    ∆Øu ti√™n m√†u s·∫Øc n·ªïi b·∫≠t cho Ph√¢n kh√∫c RFM v√† T√¨nh tr·∫°ng quan tr·ªçng.
    """
    # 1. T√¨nh tr·∫°ng quan tr·ªçng (R·∫•t quan tr·ªçng, Ho·∫°t ƒë·ªông th∆∞·ªùng xuy√™n)
    if text_value == "R·∫•t quan tr·ªçng":
        return f":orange[**{text_value}**]"
    elif text_value == "Ho·∫°t ƒë·ªông th∆∞·ªùng xuy√™n":
        return f":green[**{text_value}**]"
    elif text_value == "Ti·ªÅm nƒÉng":
        return f":blue[**{text_value}**]"
    elif text_value in ["C·∫ßn chƒÉm s√≥c", "√çt ho·∫°t ƒë·ªông"]:
        return f":red[**{text_value}**]" 
    
    # 2. Ph√¢n kh√∫c RFM (D√πng m√†u ƒë√£ ƒë·ªãnh nghƒ©a tr∆∞·ªõc, n·∫øu tr√πng v·ªõi Status th√¨ kh√¥ng sao)
    elif text_value in ["Kh√°ch h√†ng VIP", "VIP"]:
        return f":orange[**{text_value}**]"
    elif text_value in ["Kh√°ch h√†ng trung th√†nh", "Trung th√†nh", "Kh√°ch h√†ng ·ªïn ƒë·ªãnh"]:
        return f":green[**{text_value}**]"
    elif text_value in ["Kh√°ch h√†ng ti·ªÅm nƒÉng", "M·ªõi"]:
        return f":blue[**{text_value}**]"
    elif text_value in ["Kh√°ch h√†ng c√≥ nguy c∆° m·∫•t", "Kh√°ch h√†ng c·∫ßn chƒÉm s√≥c", "Kh√°ch h√†ng y·∫øu"]:
        return f":red[**{text_value}**]"
    
    else:
        return f"**{text_value}**"

# H√†m t√¨m ki·∫øm v√† l·ªçc (T·ªêI ∆ØU H√ìA L·ªåC NG√ÄY)
def filter_customers(search_term, from_date, to_date, region, channel, group):
    df = CUSTOMER_DATA.copy()
    
    # L·ªçc t√¨m ki·∫øm
    if search_term:
        df = df[
            df['name'].str.contains(search_term, case=False, na=False) |
            df['phone'].str.contains(search_term, case=False, na=False) |
            df['email'].str.contains(search_term, case=False, na=False)
        ]
        
    # L·ªçc theo Khu v·ª±c
    if region != "T·∫•t c·∫£":
        df = df[df['region'] == region]

    # L·ªçc theo K√™nh
    if channel != "T·∫•t c·∫£":
        df = df[df['fav_channel'] == channel]
        
    # L·ªçc theo Nh√≥m KH
    if group != "T·∫•t c·∫£":
        df = df[df['group'] == group]

    # L·ªçc theo ng√†y ƒëƒÉng k√Ω (NgaySinh) - T·ªëi ∆∞u h√≥a: B·ªé QUA l·ªçc n·∫øu l√† ng√†y m·∫∑c ƒë·ªãnh
    default_from_date = datetime.date(2021, 1, 1)
    default_to_date = datetime.date.today()
    
    is_date_filtered = (from_date != default_from_date) or (to_date != default_to_date)

    if is_date_filtered:
        try:
            df['registered_date'] = pd.to_datetime(df['registered'], format='%d/%m/%Y', errors='coerce')
            
            start_date = np.datetime64(from_date)
            end_date = np.datetime64(to_date) + np.timedelta64(1, 'D') 

            df = df[
                (df['registered_date'].notna()) & 
                (df['registered_date'] >= start_date) &
                (df['registered_date'] < end_date) 
            ]
        except Exception as e:
            pass 
            
    # QUAN TR·ªåNG: Khi d·ªØ li·ªáu b·ªã l·ªçc, reset trang v·ªÅ 0
    st.session_state.page = 0

    return df.to_dict('records')


def show_list_view():
    """V·∫Ω M√†n h√¨nh 1: Danh s√°ch tra c·ª©u"""
    
    # --- Form L·ªçc v√† K·∫øt qu·∫£ L·ªçc ---
    cols = st.columns([3, 2], vertical_alignment="bottom") 
    with cols[0]:
        st.title("Tra c·ª©u kh√°ch h√†ng 360¬∞")
    with cols[1]:
        st.session_state.search_term = st.text_input(
            "T√¨m ki·∫øm",
            placeholder="Nh·∫≠p t√™n, SƒêT ho·∫∑c email...",
            label_visibility="collapsed",
            value=st.session_state.search_term
        ) 
    
    # Form L·ªçc
    with st.expander("B·ªô l·ªçc", expanded=True):
        with st.form("filter_form"):
            cols = st.columns(7, vertical_alignment="bottom") 
            
            with cols[0]:
                from_date = st.date_input("T·ª´ ng√†y", datetime.date(2021, 1, 1)) 
            with cols[1]:
                to_date = st.date_input("ƒê·∫øn ng√†y", datetime.date.today())
            with cols[2]:
                unique_regions = ["T·∫•t c·∫£"] + list(CUSTOMER_DATA["region"].unique())
                selected_region = st.selectbox("Khu V·ª±c", unique_regions)
            with cols[3]:
                unique_channels = ["T·∫•t c·∫£"] + list(CUSTOMER_DATA["fav_channel"].unique())
                selected_channel = st.selectbox("K√™nh Mua H√†ng", unique_channels)
            with cols[4]:
                unique_groups = ["T·∫•t c·∫£"] + list(CUSTOMER_DATA["group"].unique())
                selected_group = st.selectbox("Nh√≥m KH", unique_groups)
            
            with cols[5]:
                if st.form_submit_button("X√≥a b·ªô l·ªçc", use_container_width=True):
                    st.session_state.search_term = ""
                    st.session_state.page = 0 
                    st.rerun() 
            with cols[6]:
                st.form_submit_button("√Åp d·ª•ng ", type="primary", use_container_width=True)
            
            filtered_customers = filter_customers(
                st.session_state.search_term, 
                from_date, 
                to_date, 
                selected_region, 
                selected_channel, 
                selected_group
            )

    st.divider()
    
    # --- PH√ÇN TRANG (PAGINATION) ---
    ITEMS_PER_PAGE = 20
    total_items = len(filtered_customers)
    total_pages = math.ceil(total_items / ITEMS_PER_PAGE)
    
    current_page = st.session_state.page
    
    if current_page >= total_pages:
        current_page = total_pages - 1 if total_pages > 0 else 0
        st.session_state.page = current_page
    
    start_idx = current_page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    
    paged_customers = filtered_customers[start_idx:end_idx]

    st.subheader(f"K·∫øt qu·∫£ tra c·ª©u ({total_items})")
    
    # Ti√™u ƒë·ªÅ b·∫£ng
    cols = st.columns([1, 3, 2, 2, 2, 1])
    cols[0].markdown("**ID**")
    cols[1].markdown("**T√™n Kh√°ch H√†ng**")
    cols[2].markdown("**T·ªïng Chi Ti√™u**")
    cols[3].markdown("**Ng√†y Mua G·∫ßn Nh·∫•t**")
    cols[4].markdown("**Nh√≥m KH**")
    cols[5].markdown("**Xem**")
    st.markdown("---") 

    # D·ªØ li·ªáu b·∫£ng
    if not paged_customers:
        st.info("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán.")
    else:
        for customer in paged_customers:
            cols = st.columns([1, 3, 2, 2, 2, 1], vertical_alignment="center") 
            cols[0].write(customer["id"])
            cols[1].write(customer["name"])
            cols[2].write(customer["total_spend_str"])
            cols[3].write(customer["last_purchase"])
            cols[4].markdown(get_badge_markdown(customer["group"]))
            
            if cols[5].button("üëÅÔ∏è", key=f"view_{customer['id']}", help="Xem chi ti·∫øt"):
                st.session_state.view = 'detail'
                st.session_state.selected_customer_id = customer['id']
                st.rerun()

    st.divider()
    
    # Thanh ƒëi·ªÅu khi·ªÉn ph√¢n trang
    cols_nav = st.columns([1, 1, 4, 1, 1])
    
    if cols_nav[0].button("‚¨ÖÔ∏è Trang tr∆∞·ªõc", disabled=(current_page == 0)):
        st.session_state.page -= 1
        st.rerun()
        
    if cols_nav[4].button("Trang sau ‚û°Ô∏è", disabled=(current_page >= total_pages - 1)):
        st.session_state.page += 1
        st.rerun()
        
    start_display = start_idx + 1
    end_display = min(end_idx, total_items)
    
    if total_items > 0:
        cols_nav[2].write(f"ƒêang hi·ªÉn th·ªã **{start_display}** ƒë·∫øn **{end_display}** (Trang **{current_page + 1}** / **{total_pages}**)")
    else:
        cols_nav[2].write("Kh√¥ng c√≥ kh√°ch h√†ng n√†o.")
    
    st.text(f"T·ªïng c·ªông {len(CUSTOMER_DATA)} kh√°ch h√†ng trong CSDL")


def show_detail_view():
    """V·∫Ω M√†n h√¨nh 2: Chi ti·∫øt kh√°ch h√†ng"""
    
    customer_id = st.session_state.selected_customer_id
    try:
        customer_df = CUSTOMER_DATA[CUSTOMER_DATA['id'] == customer_id].iloc[0]
        customer = customer_df.to_dict()
        
        order_history = ORDER_HISTORY_DATA[ORDER_HISTORY_DATA['KhachHangID'] == customer_id].drop(columns=['KhachHangID'], errors='ignore')
        
    except IndexError:
        st.error("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng. Quay l·∫°i danh s√°ch.")
        if st.button("Quay l·∫°i"):
            st.session_state.view = 'list'
            st.session_state.selected_customer_id = None
            st.rerun()
        return

    # 1. Thanh ƒëi·ªÅu h∆∞·ªõng (Navigation Bar)
    cols = st.columns([1, 3, 1, 1], vertical_alignment="bottom") 
    with cols[0]:
        if st.button("‚¨ÖÔ∏è Quay l·∫°i", use_container_width=True):
            st.session_state.view = 'list'
            st.session_state.selected_customer_id = None
            st.rerun()
    # cols[1] l√† kho·∫£ng tr·ªëng
    with cols[2]:
        st.button("‚úâÔ∏è G·ª≠i Email", use_container_width=True)
    with cols[3]:
        st.button("‚¨áÔ∏è Xu·∫•t file", use_container_width=True)

    # 2. Ti√™u ƒë·ªÅ ch√≠nh
    st.title(f"Chi ti·∫øt kh√°ch h√†ng: {customer['name']}")
    st.divider()

    # 3. Layout ch√≠nh (1 C·ªôt)
    
    # Card 1: Th√¥ng tin Kh√°ch H√†ng C∆° B·∫£n
    with st.container(border=True):
        st.subheader("üë§ Th√¥ng tin Kh√°ch H√†ng C∆° B·∫£n")
        
        cols = st.columns([2, 1, 2])
        
        # C·ªôt 1 (B√™n tr√°i)
        with cols[0]:
            st.markdown(f"**T√™n Kh√°ch H√†ng:** {customer['name']}")
            st.markdown(f"**S·ªë ƒêi·ªán Tho·∫°i:** {customer['phone']}")
            st.markdown(f"**Email:** {customer['email']}")
            st.markdown(f"**ƒê·ªãa Ch·ªâ:** {customer['address']}")
        
        # C·ªôt 2 (B√™n ph·∫£i)
        with cols[2]:
            st.markdown(f"**Ng√†y ƒêƒÉng K√Ω:** {customer['registered']}")
            st.markdown(f"**Khu V·ª±c:** {customer['region']}")
            st.markdown(f"** Lo·∫°i:** {get_badge_markdown(customer['status'])}") # S·ª¨ D·ª§NG T√åNH TR·∫†NG M·ªöI
            st.markdown(f"**Nh√≥m Kh√°ch H√†ng:** {get_badge_markdown(customer['group'])}") # D√πng group (Ph√¢n kh√∫c RFM)

    # Card 1.1: T√≥m t·∫Øt RFM
    with st.container(border=True):
        st.subheader("üìä Ph√¢n T√≠ch RFM")
        r_val = customer.get('Recency', 'N/A')
        f_val = customer.get('Frequency', 'N/A')
        m_val = customer.get('Monetary', 'N/A')
        
        cols = st.columns(3)
        cols[0].metric("Recency (Ng√†y)", f"{r_val}" if r_val != 'N/A' else "N/A")
        cols[1].metric("Frequency (L·∫ßn mua)", f"{f_val:.0f}" if isinstance(f_val, (int, float)) else "N/A")
        cols[2].metric("Monetary (Chi ti√™u)", f"{m_val:,.0f} ‚Ç´".replace(",", ".") if isinstance(m_val, (int, float)) else "N/A")

    st.write("") # Th√™m kho·∫£ng tr·∫Øng

    # Card 2: L·ªãch S·ª≠ ƒê∆°n H√†ng
    with st.container(border=True):
        st.subheader(f"üïí L·ªãch S·ª≠ ƒê∆°n H√†ng (T·ªïng: {len(order_history)} ƒë∆°n)")
        if order_history.empty:
             st.info("Kh√°ch h√†ng n√†y ch∆∞a c√≥ ƒë∆°n h√†ng n√†o trong d·ªØ li·ªáu.")
        else:
            st.dataframe(order_history, height=250, use_container_width=True)

    st.write("") # Th√™m kho·∫£ng tr·∫Øng

    # Card 3: Ghi Ch√∫ & L·ªãch S·ª≠ T∆∞∆°ng T√°c (V·∫´n d√πng Mock Data)
    with st.container(border=True):
        st.subheader("üí¨ Ghi Ch√∫ & L·ªãch S·ª≠ T∆∞∆°ng T√°c")
        
        st.success("**21/10/2025 09:30 - H·ªó tr·ª£ (Email)**\n"
                   "\nKh√°ch h√†ng h·ªèi v·ªÅ ch√≠nh s√°ch ƒë·ªïi tr·∫£. ƒê√£ g·ª≠i email x√°c nh·∫≠n.")
        st.error("**18/10/2025 14:15 - Sales (G·ªçi ƒëi·ªán)**\n"
                 "\nG·ªçi ƒëi·ªán tho·∫°i t∆∞ v·∫•n SP m·ªõi nh∆∞ng kh√°ch h√†ng b√°o b·∫≠n, h·∫πn g·ªçi l·∫°i sau.")
        st.info("**15/09/2025 11:00 - C·ª≠a h√†ng**\n"
                "\nKh√°ch h√†ng ƒë·∫øn mua tr·ª±c ti·∫øp, r·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng v·∫£i.")
        
        st.divider()
        
        st.text_area("Th√™m ghi ch√∫ n·ªôi b·ªô m·ªõi...", height=100)
        st.button("L∆∞u Ghi Ch√∫", type="primary")

# --- LU·ªíNG CH·∫†Y CH√çNH ---
if not CUSTOMER_DATA.empty:
    if st.session_state.view == 'list':
        show_list_view()
    elif st.session_state.view == 'detail':
        show_detail_view()
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi CSDL v√† ƒë·∫£m b·∫£o file ETL.py ƒë√£ ch·∫°y th√†nh c√¥ng.")